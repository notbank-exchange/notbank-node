{
  "version": 3,
  "sources": ["../node_modules/node-fetch/browser.js", "../node_modules/universal-websocket-client/browser.js", "../lib/index.ts", "../lib/models/index.ts", "../lib/models/enums/accountType.ts", "../lib/models/enums/actionType.ts", "../lib/models/enums/bankAccounts.ts", "../lib/models/enums/changeReason.ts", "../lib/models/enums/countries.ts", "../lib/models/enums/depositFeeMessages.ts", "../lib/models/enums/depositStatus.ts", "../lib/models/enums/direction.ts", "../lib/models/enums/feeProductType.ts", "../lib/models/enums/instrumentStateArgument.ts", "../lib/models/enums/instrumentType.ts", "../lib/models/enums/makerTaker.ts", "../lib/models/enums/orderFlag.ts", "../lib/models/enums/orderSide.ts", "../lib/models/enums/orderState.ts", "../lib/models/enums/orderType.ts", "../lib/models/enums/pegPriceType.ts", "../lib/models/enums/pixType.ts", "../lib/models/enums/productType.ts", "../lib/models/enums/referenceType.ts", "../lib/models/enums/reportFlavor.ts", "../lib/models/enums/reportFrequency.ts", "../lib/models/enums/reportRequestStatus.ts", "../lib/models/enums/reportWriterResultStatus.ts", "../lib/models/enums/riskType.ts", "../lib/models/enums/sessionStatus.ts", "../lib/models/enums/sideType.ts", "../lib/models/enums/timeInForce.ts", "../lib/models/enums/tradeDirection.ts", "../lib/models/enums/tradeSide.ts", "../lib/models/enums/transactionReferenceTypes.ts", "../lib/models/enums/transactionTypes.ts", "../lib/models/enums/unsubscribeLevel2ErrorCode.ts", "../lib/models/enums/unsubscribeTradesError.ts", "../lib/models/enums/withdrawErrorCode.ts", "../lib/models/enums/withdrawFeeMessages.ts", "../lib/models/enums/withdrawTemplateType.ts", "../lib/models/response/getAccountFees.ts", "../lib/models/response/orderBook.ts", "../lib/models/notbankError.ts", "../lib/models/subscriptionResponse.ts", "../lib/models/unsubscriptionResponse.ts", "../lib/core/hmac.ts", "../lib/core/http/apResponseHandler.ts", "../lib/core/http/nbResponseHandler.ts", "../lib/core/http/requester.ts", "../lib/core/http/httpClient.ts", "../lib/utils/completeParams.ts", "../lib/services/accountService.ts", "../lib/services/authService.ts", "../lib/services/feeService.ts", "../lib/services/instrumentService.ts", "../lib/services/productService.ts", "../lib/services/reportService.ts", "../lib/services/systemService.ts", "../lib/utils/completeParamsArray.ts", "../lib/utils/parseIndexTrade.ts", "../lib/services/tradingService.ts", "../lib/services/userService.ts", "../lib/services/walletService.ts", "../lib/services/quoteService.ts", "../lib/services/httpServiceFactory.ts", "../lib/core/websocket/pinger.ts", "../lib/core/websocket/reauther.ts", "../lib/core/websocket/SubscriptionIdentifier.ts", "../lib/core/websocket/resubscriber.ts", "../lib/core/websocket/websocketConnection.ts", "../lib/core/websocket/callbackManager.ts", "../lib/constants/errorCode.ts", "../lib/core/websocket/restarter.ts", "../lib/core/websocket/restartingWebsocketConnection.ts", "../lib/utils/subscriptionCallbacksHandler.ts", "../lib/services/subscriptionService.ts", "../lib/services/websocketServiceFactory.ts", "../lib/services/notbankClient.ts"],
  "sourcesContent": ["\"use strict\";\n\n// ref: https://github.com/tc39/proposal-global\nvar getGlobal = function () {\n\t// the only reliable means to get the global object is\n\t// `Function('return this')()`\n\t// However, this causes CSP violations in Chrome apps.\n\tif (typeof self !== 'undefined') { return self; }\n\tif (typeof window !== 'undefined') { return window; }\n\tif (typeof global !== 'undefined') { return global; }\n\tthrow new Error('unable to locate global object');\n}\n\nvar globalObject = getGlobal();\n\nmodule.exports = exports = globalObject.fetch;\n\n// Needed for TypeScript and Webpack.\nif (globalObject.fetch) {\n\texports.default = globalObject.fetch.bind(globalObject);\n}\n\nexports.Headers = globalObject.Headers;\nexports.Request = globalObject.Request;\nexports.Response = globalObject.Response;\n", "'use strict';\n\nmodule.exports = WebSocket;\n", "import * as models from \"./models\";\nimport { NotbankClient } from \"./services/notbankClient\";\n\nexport {\n  NotbankClient,\n  models,\n};\n", "export * from \"./enums\";\nexport * from \"./request\";\nexport * from \"./response\";\nexport * from \"./notbankError\";\nexport * from \"./standardResponse\";\nexport * from \"./subscriptionResponse\";\nexport * from \"./unsubscriptionResponse\";\n", "export enum AccountType {\n  ASSET = \"Asset\", // Representa un tipo de cuenta de activo\n  LIABILITY = \"Liability\" // Representa un tipo de cuenta de pasivo\n}\n", "/**\n * Acci\u00F3n de la actualizaci\u00F3n en Level 2:\n * 0 = New\n * 1 = Update\n * 2 = Deletion\n */\nexport enum ActionType {\n  NEW = 0,\n  UPDATE = 1,\n  DELETION = 2\n}\n", "export enum ArgentinaBankAccountKind {\n  CORRIENTE = \"corriente\",\n  VISTA = \"vista\",\n  AHORRO = \"ahorro\",\n  ELECTRONIC_CHECKBOOK = \"electronic_checkbook\",\n  AR_CBU = \"ar_cbu\",\n  AR_CVU = \"ar_cvu\",\n  AR_ALIAS = \"ar_alias\",\n}\n\nexport enum BrazilBankAccountKind {\n  BR_CORRIENTE_FISICA = \"br_corriente_fisica\",\n  BR_SIMPLE_FISICA = \"br_simple_fisica\",\n  BR_CORRIENTE_JURIDICA = \"br_corriente_juridica\",\n  BR_POUPANCA_FISICA = \"br_poupanca_fisica\",\n  BR_POUPANCA_JURIDICA = \"br_poupanca_juridica\",\n  BR_CAIXA_FACIL = \"br_caixa_facil\",\n  BR_PIX = \"br_pix\",\n}\n\nexport enum ChileBankAccountKind {\n  CORRIENTE = \"corriente\",\n  VISTA = \"vista\",\n  AHORRO = \"ahorro\",\n  ELECTRONIC_CHECKBOOK = \"electronic_checkbook\",\n}\n\nexport enum PeruBankAccountKind {\n  CORRIENTE = \"corriente\",\n  AHORRO = \"ahorro\",\n}\n\nexport enum ColombiaBankAccountKind {\n  CORRIENTE = \"corriente\",\n  AHORRO = \"ahorro\",\n}\n", "export enum ChangeReason {\n  UNKNOWN = \"Unknown\",\n  NEWINPUTACCEPTED = \"NewInputAccepted\",\n  NEWINPUTREJECTED = \"NewInputRejected\",\n  OTHERREJECTED = \"OtherRejected\",\n  EXPIRED = \"Expired\",\n  TRADE = \"Trade\",\n  SYSTEMCANCELED_NOMOREDMARKET = \"SystemCanceled_NoMoreMarket\",\n  SYSTEMCANCELED_BELOWMINIMUM = \"SystemCanceled_BelowMinimum\",\n  SYSTEMCANCELED_PRICECOLLAR = \"SystemCanceled_PriceCollar\",\n  SYSTEMCANCELED_MARGINFAILED = \"SystemCanceled_MarginFailed\",\n  USERMODIFIED = \"UserModified\"\n}\n", "export enum SupportedCountry {\n  AR = \"AR\",\n  BR = \"BR\",\n  CL = \"CL\",\n  PE = \"PE\",\n  CO = \"CO\",\n}\n", "// Enumeraci\u00F3n de los posibles mensajes sobre la tarifa de dep\u00F3sito\nexport enum DepositFeeMessages {\n  Success = \"Fee calculated successfully\",\n  InvalidRequest = \"Invalid Request\",\n  AccountOrProductNotFound = \"Account or Product not found\"\n}\n", "// Estados posibles para el dep\u00F3sito\nexport enum DepositStatus {\n  New = \"New\", // El dep\u00F3sito se crea en estado \"Nuevo\".\n  Pending = \"Pending\", // Dep\u00F3sito en progreso.\n  FullyProcessed = \"FullyProcessed\", // Dep\u00F3sito completado.\n  Error = \"Error\" // Dep\u00F3sito con error.\n}\n", "// Enumerados para la solicitud\nexport enum Direction {\n  NoChange = 0,\n  Uptick = 1,\n  DownTick = 2\n}\n", "// Enum para los valores posibles de FeeProductType\nexport enum FeeProductType {\n  BASE_PRODUCT = \"BaseProduct\", // Tarifas cobradas en el producto base\n  SINGLE_PRODUCT = \"SingleProduct\" // Tarifas cobradas en un producto espec\u00EDfico\n}\n", "export enum InstrumentStateArgument {\n  BOTH = \"BOTH\",\n  INACTIVE = \"INACTIVE\"\n}\n", "export enum InstrumentType {\n  UNKNOWN = \"Unknown\",\n  STANDARD = \"Standard\"\n}\n", "// Tipo del Maker/Taker\nexport enum MakerTaker {\n  Unknown = 0,\n  Maker = 1,\n  Taker = 2\n}\n", "// Flags de la orden\nexport enum OrderFlag {\n  NoAccountRiskCheck = \"NoAccountRiskCheck\",\n  AddedToBook = \"AddedToBook\",\n  RemovedFromBook = \"RemovedFromBook\",\n  PostOnly = \"PostOnly\",\n  Liquidation = \"Liquidation\",\n  ReverseMarginPosition = \"ReverseMarginPosition\"\n}\n", "// Lado de la orden\nexport enum OrderSide {\n  Buy = 0,\n  Sell = 1\n}\n", "export enum OrderState {\n  Unknown = \"Unknown\",\n  Working = \"Working\",\n  Rejected = \"Rejected\",\n  Canceled = \"Canceled\",\n  Expired = \"Expired\",\n  FullyExecuted = \"Fully Executed\"\n}\n", "// Tipos de orden\nexport enum OrderTypeInt {\n  Unknown = 0,\n  Market = 1,\n  Limit = 2,\n  StopMarket = 3,\n  StopLimit = 4,\n  TrailingStopMarket = 5,\n  TrailingStopLimit = 6,\n  BlockTrade = 7\n}\n\nexport enum OrderTypeStr {\n  Unknown = \"Unknown\",\n  Market = \"Market\",\n  Limit = \"Limit\",\n  StopMarket = \"StopMarket\",\n  StopLimit = \"StopLimit\",\n  TrailingStopMarket = \"TrailingStopMarket\",\n  TrailingStopLimit = \"TrailingStopLimit\",\n  BlockTrade = \"BlockTrade\"\n}\n", "// Tipo de precio para \u00F3rdenes Stop y Trailing\nexport enum PegPriceType {\n  Last = 1,\n  Bid = 2,\n  Ask = 3,\n  Midpoint = 4 // No soportado actualmente\n}\n", "export enum PixType {\n  CPF = \"CPF\",\n  CNPJ = \"CNPJ\",\n  EMAIL = \"Email\",\n  PHONE = \"Phone\",\n  OTRO = \"Otro\",\n}\n", "export enum ProductType {\n  UNKNOWN = \"Unknown\",\n  NATIONAL_CURRENCY = \"NationalCurrency\",\n  CRYPTO_CURRENCY = \"CryptoCurrency\",\n  CONTRACT = \"Contract\"\n}\n", "// Tipo de referencia\nexport enum ReferenceType {\n  Withdraw = \"Withdraw\" // Siempre ser\u00E1 \"Withdraw\" para esta transacci\u00F3n\n}\n", "export enum ReportFlavor {\n  TradeActivity = \"TradeActivity\",\n  TransactionActivity = \"TransactionActivity\",\n  ProductDelta = \"ProductDelta\",\n  ProfitAndLoss = \"ProfitAndLoss\",\n  Transaction = \"Transaction\",\n  Treasury = \"Treasury\"\n}\n", "export enum ReportFrequency {\n  OnDemand = \"OnDemand\",\n  Hourly = \"Hourly\",\n  Daily = \"Daily\",\n  Weekly = \"Weekly\",\n  Monthly = \"Monthly\",\n  Annually = \"Annually\"\n}\n", "export enum ReportRequestStatus {\n  Submitted = \"Submitted\",\n  Validating = \"Validating\",\n  Scheduled = \"Scheduled\",\n  InProgress = \"InProgress\",\n  Completed = \"Completed\",\n  Aborting = \"Aborting\",\n  Aborted = \"Aborted\",\n  UserCancelled = \"UserCancelled\",\n  SysRetired = \"SysRetired\",\n  Pending = \"Pending\",\n  UserCancelPending = \"UserCancelPending\"\n}\n", "export enum ReportWriterResultStatus {\n  NotStarted = \"NotStarted\",\n  NotComplete = \"NotComplete\",\n  ErrorComplete = \"ErrorComplete\",\n  SuccessComplete = \"SuccessComplete\",\n  Cancelled = \"Cancelled\"\n}\n", "// Enum para los valores posibles de RiskType\nexport enum RiskType {\n  UNKNOWN = \"Unknown\", // Error o tipo de riesgo no definido\n  NORMAL = \"Normal\", // Riesgo est\u00E1ndar\n  NO_RISK_CHECK = \"NoRiskCheck\", // Sin chequeo de riesgo\n  NO_TRADING = \"NoTrading\", // El usuario no puede operar\n  CREDIT = \"Credit\" // Riesgo basado en cr\u00E9dito\n}\n", "export enum SessionStatus {\n  UNKNOWN = \"Unknown\",\n  RUNNING = \"Running\",\n  PAUSED = \"Paused\",\n  STOPPED = \"Stopped\",\n  STARTING = \"Starting\",\n  RUNNING_POST_ONLY = \"RunningPostOnly\"\n}\n", "export enum SideType {\n  BUY = \"Buy\",\n  SELL = \"Sell\"\n}\n", "// Tiempo de ejecuci\u00F3n\nexport enum TimeInForce {\n  Unknown = 0,\n  GTC = 1, // Good 'til canceled\n  OPG = 2, // Execute as close to opening price\n  IOC = 3, // Immediate or canceled\n  FOK = 4, // Fill or kill\n  GTX = 5, // Good 'til executed\n  GTD = 6 // Good 'til date\n}\n", "// Direcci\u00F3n de la transacci\u00F3n en el mercado\nexport enum TradeDirection {\n  NoChange = 0,\n  Uptick = 1,\n  DownTick = 2\n}\n", "// Lados del comercio (Side)\nexport enum TradeSide {\n  Buy = 0,\n  Sell = 1,\n  Short = 2,\n  Unknown = 3\n}\n", "export enum TransactionReferenceTypes {\n  Trade = \"Trade\",\n  Deposit = \"Deposit\",\n  Withdraw = \"Withdraw\",\n  Transfer = \"Transfer\",\n  OrderHold = \"OrderHold\",\n  WithdrawHold = \"WithdrawHold\",\n  DepositHold = \"DepositHold\",\n  MarginHold = \"MarginHold\",\n  ManualHold = \"ManualHold\",\n  ManualEntry = \"ManualEntry\",\n  MarginAcquisition = \"MarginAcquisition\",\n  MarginRelinquish = \"MarginRelinquish\",\n  MarginInterestNetting = \"MarginInterestNetting\",\n  MarginOperatorTransferToMarginAccount = \"MarginOperatorTransferToMarginAccount\",\n  MarginOperatorTransferToAssetAccount = \"MarginOperatorTransferToAssetAccount\",\n  MarginUserTransfer = \"MarginUserTransfer\",\n  MarginPositionReverseTrade = \"MarginPositionReverseTrade\",\n  AffiliateRebate = \"AffiliateRebate\",\n  DistributionEntry = \"DistributionEntry\",\n  TransferHold = \"TransferHold\",\n  AirDrop = \"AirDrop\"\n}\n", "export enum TransactionTypes {\n  Fee = \"Fee\",\n  Trade = \"Trade\",\n  Other = \"Other\",\n  Reverse = \"Reverse\",\n  Hold = \"Hold\",\n  Rebate = \"Rebate\",\n  MarginAcquisition = \"MarginAcquisition\",\n  MarginRelinquishByTrade = \"MarginRelinquishByTrade\",\n  MarginInterestTransfer = \"MarginInterestTransfer\",\n  MarginOperatorTransferToMarginAccount = \"MarginOperatorTransferToMarginAccount\",\n  MarginOperatorTransferToAssetAccount = \"MarginOperatorTransferToAssetAccount\",\n  MarginUserTransfer = \"MarginUserTransfer\",\n  MarginRelinquishByTransfer = \"MarginRelinquishByTransfer\",\n  MarginRelinquishByReverseTrade = \"MarginRelinquishByReverseTrade\",\n  Distribution = \"Distribution\",\n  Payment = \"Payment\",\n  OperatorLend = \"OperatorLend\",\n  OperatorReceived = \"OperatorReceived\",\n  Rebalance = \"Rebalance\",\n  Commission = \"Commission\",\n  AirDrop = \"AirDrop\"\n}\n", "export enum UnsubscribeLevel2ErrorCode {\n  SUCCESS = 0,\n  NOT_AUTHORIZED = 20,\n  INVALID_REQUEST = 100,\n  OPERATION_FAILED = 101,\n  SERVER_ERROR = 102,\n  RESOURCE_NOT_FOUND = 104\n}\n", "export enum UnsubscribeTradesError {\n  NotAuthorized = 20,\n  InvalidRequest = 100,\n  OperationFailed = 101,\n  ServerError = 102,\n  ResourceNotFound = 104\n}\n", "// C\u00F3digos de error posibles\nexport enum WithdrawErrorCode {\n  NoError = 0,\n  NotAuthorized = 20,\n  InvalidRequest = 100,\n  OperationFailed = 101,\n  ServerError = 102,\n  ResourceNotFound = 104\n}\n", "export enum WithdrawFeeMessages {\n  Success = \"Fee calculated successfully\",\n  InvalidRequest = \"Invalid Request\",\n  AccountOrProductNotFound = \"Account or Product not found\"\n}\n", "// Tipos de plantilla (con posibles valores)\nexport enum WithdrawTemplateType {\n  ToExternalBitcoinAddress = \"ToExternalBitcoinAddress\",\n  ToInternalAccount = \"ToInternalAccount\",\n  ToBankAccount = \"ToBankAccount\"\n}\n", "import { OrderTypeStr } from \"../enums/orderType\";\n\nexport interface AccountFee {\n  FeeId: number;\n  OMSId: number;\n  FeeTier: number;\n  AccountId: number;\n  FeeAmt: number;\n  FeeCalcType: FeeCalcType;\n  FeeType: FeeType;\n  LadderThreshold: number;\n  LadderSeconds: number;\n  IsActive: boolean;\n  InstrumentId: number;\n  OrderType: OrderTypeStr;\n  PeggedProductId: number;\n}\n\nexport enum FeeCalcType {\n  Flat = \"Flat\",\n  Percentage = \"Percentage\",\n}\n\nexport enum FeeType {\n  Flat = \"Flat\",\n  MakerFee = \"MakerFee\",\n  TakerFee = \"TakerFee\",\n  PeggedProductFee = \"PeggedProductFee\",\n  AffiliateFee = \"AffiliateFee\",\n}\n", "export interface OrderBookRaw {\n  timestamp: number;\n  bids: number[][];\n  asks: number[][];\n}\n\nexport interface Level {\n  quantity: number\n  price: number\n}\n\nexport interface OrderBook {\n  timestamp: number;\n  bids: Level[];\n  asks: Level[];\n}\n\nexport function orderbookFromRaw(raw: OrderBookRaw): OrderBook {\n  return {\n    timestamp: raw.timestamp,\n    bids: raw.bids.map(level => { return { quantity: level[0], price: level[1] } }),\n    asks: raw.asks.map(level => { return { quantity: level[0], price: level[1] } })\n  }\n}", "import { NbResponse } from \"./nbResponse\";\nimport { StandardResponse as StandardApResponse } from \"./standardResponse\";\n\nexport class NotbankError extends Error {\n  code: number;\n\n  constructor(message: string, code: number) {\n    super(\"Notbank Error. \" + message)\n    this.code = code\n  }\n\n  static Factory = class Factory {\n    static createFromApResponse(standardResponse: StandardApResponse): NotbankError {\n      var errMsg = \"\"\n      if (standardResponse.errorcode) {\n        errMsg += `(code=${standardResponse.errorcode})`;\n      }\n      if (standardResponse.errormsg) {\n        errMsg += \" \" + standardResponse.errormsg + \".\";\n      }\n      if (standardResponse.detail) {\n        errMsg += \" \" + standardResponse.detail + \".\";\n      }\n      return new NotbankError(\n        errMsg,\n        standardResponse.errorcode || standardResponse.statusCode\n      )\n    }\n\n    static createFromNbResponse(standardResponse: NbResponse): NotbankError {\n      var errMsg = \"\";\n      if (standardResponse.message) {\n        errMsg += standardResponse.message;\n        if (!standardResponse.message.endsWith(\".\")) {\n          errMsg += \".\";\n        }\n      }\n      if (standardResponse.detail) {\n        errMsg += \" \" + standardResponse.detail\n        if (!standardResponse.detail.endsWith(\".\")) {\n          errMsg += \".\";\n        }\n      }\n\n      return new NotbankError(errMsg, -1,\n      )\n    }\n  }\n}\n", "export class UnsubscriptionResponse {\n  UnSubscribed: boolean;\n}\n", "export class SubscriptionResponse {\n  Subscribed: boolean;\n}\n", "import crypto from \"crypto\";\n\nfunction getRandomInt(max: number): number {\n  return Math.floor(Math.random() * max);\n}\n\nexport function getNonce(): string {\n  return getRandomInt(1_000_000).toString();\n}\n\nexport function sign(\n  apiPublicKey: string,\n  apiSecretKey: string,\n  userId: string,\n  nonce: string\n): string {\n  var message = nonce + userId + apiPublicKey;\n  const hmac256 = crypto.createHmac(\"sha256\", apiSecretKey);\n  hmac256.update(message);\n  return hmac256.digest(\"hex\");\n}\n", "import {\n  NotbankError,\n  StandardResponse\n} from \"../../models\";\nimport { Response } from 'node-fetch';\n\nexport class ApResponseHandler {\n  public static async handle<T>(response: Response): Promise<T> {\n\n    if (response.status >= 400 || response.status < 200) {\n      throw new Error(\n        `http error (${response.status\n        }) not a successfull response. ${await ApResponseHandler.#getTextData(response)}`\n      );\n    }\n    var jsonResponse = await ApResponseHandler.#getJsonData(response)\n    if (!jsonResponse) {\n      throw new NotbankError(\"http error. (status=\" + response.status + \")\", -1)\n    }\n    var standardResponse = jsonResponse as StandardResponse;\n    if (\n      standardResponse?.result === false &&\n      standardResponse?.errorcode != null\n    ) {\n      throw NotbankError.Factory.createFromApResponse(standardResponse);\n    }\n    return jsonResponse as T;\n  }\n\n  static async #getJsonData(response: Response): Promise<any> {\n    try {\n      return await response.json();\n    } catch (err) {\n      return null;\n    }\n  }\n\n  static async #getTextData(response: Response): Promise<any> {\n    try {\n      return await response.text();\n    } catch (err) {\n      return null;\n    }\n  }\n}\n", "import { NbResponse } from \"../../models/nbResponse\";\nimport { NotbankError } from \"../../models/notbankError\";\nimport { Response } from 'node-fetch';\n\n\nexport class NbResponseHandler {\n  public static async handle<T>(response: Response, paged: boolean): Promise<T> {\n    try {\n      var jsonResponse = await NbResponseHandler.#getData(response);\n      if (!jsonResponse) {\n        throw new NotbankError(\"http error. (status=\" + response.status + \")\", -1)\n      }\n      var nbResponse = jsonResponse as NbResponse;\n      if (nbResponse?.status === 'success') {\n        return paged ? jsonResponse as T : nbResponse.data as T\n      }\n      const error = NotbankError.Factory.createFromNbResponse(nbResponse);\n      throw error;\n    } catch (error) {\n      throw error; // Re-lanza el error\n    }\n  }\n\n  static async #getData(response: Response): Promise<any> {\n    try {\n      const data = await response.json();\n      return data\n    } catch (err) {\n      return null;\n    }\n  }\n}\n", "import { RequestType } from \"../serviceClient\";\nimport fetch, { RequestInit, Response } from 'node-fetch';\n\nexport class Requester {\n  #aptoken: string | null;\n\n  constructor() {\n    this.#aptoken = null;\n  }\n\n  updateSessionToken(aptoken: string) {\n    this.#aptoken = aptoken;\n  }\n\n  request<T1>(config: {\n    url: string,\n    requestType: RequestType,\n    params?: T1;\n    extraHeaders?: any\n  }\n  ): Promise<Response> {\n    const isPostOrDeleteRequest = [\n      RequestType.POST, RequestType.DELETE].includes(config.requestType)\n    var url = isPostOrDeleteRequest\n      ? config.url\n      : this.getUrlWithSearchParams(config.url, config.params);\n    var body = isPostOrDeleteRequest\n      ? config.params :\n      null;\n    var requestData: RequestInit = {\n      method: config.requestType,\n      headers: this.getHeaders(config.extraHeaders)\n    }\n    if (body) {\n      requestData.body = JSON.stringify(body)\n    }\n    return fetch(url, requestData);\n  }\n\n  getHeaders(extraHeaders?: any): any {\n    var headers = {\n      \"Content-type\": \"application/json\",\n      charset: \"UTF-8\"\n    };\n    if (this.#aptoken) {\n      headers[\"aptoken\"] = this.#aptoken;\n    }\n    if (extraHeaders) {\n      return { ...headers, ...extraHeaders };\n    }\n    return headers;\n  }\n\n  getUrlWithSearchParams(endpoint: string, params?: any): string {\n    return params ? endpoint + \"?\" + new URLSearchParams(params) : endpoint;\n  }\n}\n", "import { Endpoint } from \"../../constants/endpoints\";\nimport {\n  AuthenticateUserRequest,\n  AuthenticateUserResponse\n} from \"../../models\";\nimport { RequestType, ServiceConnection } from \"../serviceClient\";\nimport { MessageFrame } from \"../websocket/messageFrame\";\nimport { ResponseHandler } from \"../websocket/responseHandler\";\nimport { SubscriptionHandler } from \"../websocket/subscriptionHandler\";\nimport { ApResponseHandler } from \"./apResponseHandler\";\nimport { NbResponseHandler } from \"./nbResponseHandler\";\nimport { Requester } from \"./requester\";\n\nexport class HttpConnection implements ServiceConnection {\n  #requester: Requester;\n  #host: string;\n\n  constructor(domain: string) {\n    this.#requester = new Requester();\n    this.#host = \"https://\" + domain;\n  }\n\n  async nbRequest<T1, T2>(\n    endpoint: string,\n    requestType: RequestType,\n    params?: T1,\n    paged: boolean = false\n  ): Promise<T2> {\n    const url = this.getNbUrl(endpoint);\n    var response = await this.#requester.request({ url, requestType, params });\n    return await NbResponseHandler.handle<T2>(response, paged);\n  }\n\n  async apRequest<T1, T2>(\n    endpoint: string,\n    requestType: RequestType,\n    params?: T1,\n    extraHeaders?: any\n  ): Promise<T2> {\n    const url = this.getApUrl(endpoint);\n    var response = await this.#requester.request({\n      url,\n      requestType,\n      params,\n      extraHeaders\n    });\n    return await ApResponseHandler.handle<T2>(response);\n  }\n\n  updateSessionToken(sessionToken: string) {\n    this.#requester.updateSessionToken(sessionToken);\n  }\n\n  async authenticateUser(params: AuthenticateUserRequest): Promise<void> {\n    var response = await this.apRequest<any, AuthenticateUserResponse>(\n      Endpoint.AUTHENTICATE_USER,\n      RequestType.GET,\n      null,\n      params\n    );\n    this.#requester.updateSessionToken(response.SessionToken);\n  }\n\n  subscribe<T>(\n    endpoint: string,\n    firstIdentifier: number | null,\n    secondIdentifier: number | null,\n    message: T,\n    subscriptionCallbacks: SubscriptionHandler<MessageFrame>[]\n  ): Promise<void> {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  unsubscribe<T>(\n    endpoint: string,\n    firstIdentifier: number | null,\n    secondIdentifier: number | null,\n    message: T,\n    callback_ids: string[]\n  ): Promise<void> {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  setResponseHandler<T1, T2>(responseHandler: ResponseHandler<T1, T2>): void {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  setResponseHandlers<T>(responseHandlers: SubscriptionHandler<T>[]): void {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  getApUrl(endpoint: string): string {\n    return this.#host + \"/ap/\" + endpoint;\n  }\n  getNbUrl(endpoint: string): string {\n    return this.#host + \"/api/nb/\" + endpoint;\n  }\n  connect(): Promise<void> {\n    return Promise.resolve();\n  }\n  close(): Promise<void> {\n    return Promise.resolve();\n  }\n}\n", "export function completeParams<T>(\n  params: T,\n  omsId: number\n): T & { OMSId: number } {\n  return {\n    ...params,\n    OMSId: omsId\n  };\n}\n", "import { Endpoint } from \"../constants/endpoints\";\nimport { RequestType, ServiceConnection } from \"../core/serviceClient\";\nimport { GetAccountInfoRequest } from \"../models/request/getAccountInfo\";\nimport { GetAccountInstrumentStatisticsRequest } from \"../models/request/getAccountInstrumentStatistics\";\nimport { GetAccountPositionRequest } from \"../models/request/getAccountPositions\";\nimport { GetAccountTransactionsRequest } from \"../models/request/getAccountTransactions\";\nimport { AccountInfo } from \"../models/response/accountInfo\";\nimport { AccountPosition } from \"../models/response/accountPositions\";\nimport { AccountInstrumentStatistics } from \"../models/response/getAccountInstrumentStatistics\";\nimport { AccountTransaction } from \"../models/response/getAccountTransactions\";\nimport { completeParams } from \"../utils/completeParams\";\n\nexport class AccountService {\n  connection: ServiceConnection;\n  private readonly OMS_ID = 1;\n\n  constructor(connection: ServiceConnection) {\n    this.connection = connection;\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getaccounttransactions\n   */\n  getAccountTransactions(\n    request: GetAccountTransactionsRequest\n  ): Promise<AccountTransaction[]> {\n    const paramsWithOMSId = completeParams(request, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.GET_ACCOUNT_TRANSACTIONS,\n      RequestType.POST,\n      paramsWithOMSId\n    )\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getaccountpositions\n   */\n  getAccountPositions(\n    params: GetAccountPositionRequest\n  ): Promise<AccountPosition[]> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.GET_ACCOUNT_POSITIONS,\n      RequestType.POST,\n      paramsWithOMSId\n    )\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getaccountinstrumentstatistics\n   */\n  getAccountInstrumentStatistics(\n    params: GetAccountInstrumentStatisticsRequest\n  ): Promise<AccountInstrumentStatistics[]> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.GET_ACCOUNT_INSTRUMENT_STATISTICS,\n      RequestType.POST,\n      paramsWithOMSId\n    )\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getaccountinfo\n   */\n  public async getAccountInfo(\n    params: GetAccountInfoRequest\n  ): Promise<AccountInfo> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.GET_ACCOUNT_INFO,\n      RequestType.POST,\n      paramsWithOMSId\n    )\n  }\n}\n", "import { Endpoint } from \"../constants/endpoints\";\nimport { RequestType, ServiceConnection } from \"../core/serviceClient\";\nimport { WebAuthenticateUserRequest } from \"../models/request/webAuthenticateUser\";\nimport { WebAuthenticateUserResponse } from \"../models/response/webAuthenticateUser\";\n\nexport class AuthService {\n  connection: ServiceConnection;\n\n  constructor(connection: ServiceConnection) {\n    this.connection = connection;\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/?http#webauthenticateuser\n   */\n  async webAuthenticateUser(\n    params: WebAuthenticateUserRequest\n  ): Promise<WebAuthenticateUserResponse> {\n    return await this.connection.apRequest(\n      Endpoint.WEB_AUTHENTICATE_USER,\n      RequestType.NONE,\n      params\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/?http#logout\n   */\n  async logOut(): Promise<void> {\n    return await this.connection.apRequest(Endpoint.LOGOUT, RequestType.POST);\n  }\n}\n", "import { Endpoint } from \"../constants/endpoints\";\nimport { RequestType, ServiceConnection } from \"../core/serviceClient\";\nimport { GetAccountFeesRequest } from \"../models/request/getAccountFees\";\nimport { GetDepositFeeRequest } from \"../models/request/getDepositFee\";\nimport { GetOMSDepositFeesRequest } from \"../models/request/getOMSDepositFees\";\nimport { GetOMSWithdrawFeesRequest } from \"../models/request/getOMSWithdrawFees\";\nimport { GetOrderFeeRequest } from \"../models/request/getOrderFee\";\nimport { GetWithdrawFeeRequest } from \"../models/request/getWithdrawFee\";\nimport { AccountFee } from \"../models/response/getAccountFees\";\nimport { DepositFee } from \"../models/response/getDepositFee\";\nimport { OMSDepositFee } from \"../models/response/getOMSDepositFees\";\nimport { OMSWithdrawFee } from \"../models/response/getOMSWithdrawFees\";\nimport { OrderFee } from \"../models/response/getOrderFee\";\nimport { WithdrawFee } from \"../models/response/getWithdrawFee\";\nimport { completeParams } from \"../utils/completeParams\";\n\nexport class FeeService {\n  connection: ServiceConnection;\n  private readonly OMS_ID = 1;\n\n  constructor(connection: ServiceConnection) {\n    this.connection = connection;\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getdepositfee\n   */\n  getDepositFee(\n    params: GetDepositFeeRequest\n  ): Promise<DepositFee> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.GET_DEPOSIT_FEE,\n      RequestType.POST,\n      paramsWithOMSId\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getwithdrawfee\n   */\n  getWithdrawFee(\n    params: GetWithdrawFeeRequest\n  ): Promise<WithdrawFee> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.GET_WITHDRAW_FEE,\n      RequestType.POST,\n      paramsWithOMSId\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getomswithdrawfees\n   */\n  getOMSWithdrawFees(\n    params: GetOMSWithdrawFeesRequest\n  ): Promise<OMSWithdrawFee[]> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.GET_OMS_WITHDRAW_FEES,\n      RequestType.POST,\n      paramsWithOMSId\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getomsdepositfees\n   */\n  async getOMSDepositFees(\n    params: GetOMSDepositFeesRequest\n  ): Promise<OMSDepositFee[]> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.GET_OMS_DEPOSIT_FEES,\n      RequestType.POST,\n      paramsWithOMSId\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getaccountfees\n   */\n  async getAccountFees(\n    params: GetAccountFeesRequest\n  ): Promise<AccountFee[]> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.GET_ACCOUNT_FEES,\n      RequestType.POST,\n      paramsWithOMSId\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getorderfee\n   */\n  async getOrderFee(params: GetOrderFeeRequest): Promise<OrderFee> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.GET_ORDER_FEE,\n      RequestType.POST,\n      paramsWithOMSId\n    );\n  }\n}\n", "import { Endpoint } from \"../constants/endpoints\";\nimport { RequestType, ServiceConnection } from \"../core/serviceClient\";\nimport { NotbankError } from \"../models\";\nimport { GetInstrumentRequest } from \"../models/request/getInstrument\";\nimport { GetInstrumentsRequest } from \"../models/request/getInstruments\";\nimport { GetInstrumentVerificationLevelConfigRequest } from \"../models/request/getInstrumentVerificationLevelConfig\";\nimport { InstrumentVerificationLevelConfig } from \"../models/response/getInstrumentVerificationLevelConfig\";\nimport { Instrument } from \"../models/response/instrument\";\nimport { completeParams } from \"../utils/completeParams\";\n\nexport class InstrumentService {\n  connection: ServiceConnection;\n  private readonly OMS_ID = 1;\n  private instrumentCache: { [key: string]: Instrument }\n\n  constructor(connection: ServiceConnection) {\n    this.connection = connection;\n    this.instrumentCache = {}\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getinstruments\n   */\n  getInstruments(\n    params: GetInstrumentsRequest = {}\n  ): Promise<Instrument[]> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.GET_INSTRUMENTS,\n      RequestType.POST,\n      paramsWithOMSId\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getinstrument\n   */\n  getInstrument(\n    params: GetInstrumentRequest\n  ): Promise<Instrument> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.GET_INSTRUMENT,\n      RequestType.POST,\n      paramsWithOMSId\n    );\n  }\n\n  async getInstrumentBySymbol(\n    params: { symbol: string }\n  ): Promise<Instrument> {\n    if (!(params.symbol in this.instrumentCache)) {\n      var instruments = await this.getInstruments();\n      instruments.map(instrument => this.instrumentCache[instrument.Symbol] = instrument)\n    }\n    if (params.symbol in this.instrumentCache) {\n      return Promise.resolve(this.instrumentCache[params.symbol]);\n    } else {\n      throw new NotbankError(\"no instrument found for symbol \" + params.symbol, -1)\n    }\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getinstrumentverificationlevelconfig\n   */\n  async getInstrumentVerificationLevelConfigs(\n    params: GetInstrumentVerificationLevelConfigRequest\n  ): Promise<InstrumentVerificationLevelConfig[]> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.GET_INSTRUMENT_VERIFICATION_LEVEL_CONFIG,\n      RequestType.POST,\n      paramsWithOMSId\n    );\n  }\n}\n", "import { Endpoint } from \"../constants/endpoints\";\nimport { RequestType, ServiceConnection } from \"../core/serviceClient\";\nimport { GetProductRequest } from \"../models/request/getProduct\";\nimport { GetProductsRequest } from \"../models/request/getProducts\";\nimport { GetVerificationLevelConfigRequest } from \"../models/request/getVerificationLevelConfig\";\nimport { Product } from \"../models/response/product\";\nimport { VerificationLevelConfig } from \"../models/response/getVerificationLevelConfig\";\nimport { completeParams } from \"../utils/completeParams\";\nimport { NotbankError } from \"../models/notbankError\";\n\nexport class ProductService {\n  connection: ServiceConnection;\n  private productCache: { [key: string]: Product }\n  private readonly OMS_ID = 1;\n\n  constructor(connection: ServiceConnection) {\n    this.connection = connection;\n    this.productCache = {}\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getproduct\n   */\n  getProduct(params: GetProductRequest): Promise<Product> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.GET_PRODUCT,\n      RequestType.POST,\n      paramsWithOMSId\n    )\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getproducts\n   */\n  async getProducts(params: GetProductsRequest = {}): Promise<Product[]> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.GET_PRODUCTS,\n      RequestType.POST,\n      paramsWithOMSId\n    )\n  }\n\n\n  async getProductBySymbol(\n    params: { symbol: string }\n  ): Promise<Product> {\n    if (!(params.symbol in this.productCache)) {\n      var products = await this.getProducts();\n      products.map(product => this.productCache[product.Product] = product)\n    }\n    if (params.symbol in this.productCache) {\n      return Promise.resolve(this.productCache[params.symbol]);\n    } else {\n      throw new NotbankError(\"no product found for symbol \" + params.symbol, -1)\n    }\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getverificationlevelconfig\n   */\n  async getVerificationLevelConfig(\n    params: GetVerificationLevelConfigRequest\n  ): Promise<VerificationLevelConfig> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    return await this.connection.apRequest(\n      Endpoint.GET_VERIFICATION_LEVEL_CONFIG,\n      RequestType.POST,\n      paramsWithOMSId\n    );\n  }\n}\n", "import { Endpoint } from \"../constants/endpoints\";\nimport { RequestType, ServiceConnection } from \"../core/serviceClient\";\nimport { CancelUserReportRequest } from \"../models/request/cancelUserReport\";\nimport { DownloadDocumentRequest } from \"../models/request/downloadDocument\";\nimport { DownloadDocumentSliceRequest } from \"../models/request/downloadDocumentSlice\";\nimport { GenerateActivityReportRequest } from \"../models/request/generateTradeActivityReport\";\nimport { GetUserReportTicketsRequest } from \"../models/request/getUserReportTickets\";\nimport { GetUserReportTicketsByStatusRequest } from \"../models/request/getUserReportTicketsByStatus\";\nimport { GetUserReportWriterResultRecordsRequest } from \"../models/request/getUserReportWriterResultRecords\";\nimport { RemoveUserReportTicket } from \"../models/request/removeUserReportTicket\";\nimport { ScheduleActivityReportRequest } from \"../models/request/scheduleActivityReport\";\nimport { Document } from \"../models/response/downloadDocument\";\nimport { DocumentSlice } from \"../models/response/downloadDocumentSlice\";\nimport { ActivityReport } from \"../models/response/generateTradeActivityReport\";\nimport { UserReportTicket } from \"../models/response/getUserReportTicket\";\nimport { UserReportWriterResultRecords } from \"../models/response/getUserReportWriterResultRecords\";\nimport { ScheduleActivityReport } from \"../models/response/scheduleActivityReport\";\nimport { completeParams } from \"../utils/completeParams\";\n\nexport class ReportService {\n  connection: ServiceConnection;\n  private readonly OMS_ID = 1;\n\n  constructor(connection: ServiceConnection) {\n    this.connection = connection;\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#generatetradeactivityreport\n   */\n  generateTradeActivityReport(\n    request: GenerateActivityReportRequest\n  ): Promise<ActivityReport> {\n    const params = completeParams(request, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.GENERATE_TRADE_ACTIVITY_REPORT,\n      RequestType.POST,\n      params\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#generatetransactionactivityreport\n   */\n  generateTransactionActivityReport(\n    request: GenerateActivityReportRequest\n  ): Promise<ActivityReport> {\n    const params = completeParams(request, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.GENERATE_TRANSACTION_ACTIVITY_REPORT,\n      RequestType.POST,\n      params\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#generateproductdeltaactivityreport\n   */\n  generateProductDeltaActivityReport(\n    request: GenerateActivityReportRequest\n  ): Promise<ActivityReport> {\n    const params = completeParams(request, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.GENERATE_PRODUCT_DELTA_ACTIVITY_REPORT,\n      RequestType.POST,\n      params\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#generatepnlactivityreport\n   */\n  generatePnLActivityReport(\n    request: GenerateActivityReportRequest\n  ): Promise<ActivityReport> {\n    const params = completeParams(request, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.GENERATE_PNL_ACTIVITY_REPORT,\n      RequestType.POST,\n      params\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#scheduletradeactivityreport\n   */\n  scheduleTradeActivityReport(\n    request: ScheduleActivityReportRequest\n  ): Promise<ScheduleActivityReport> {\n    const params = completeParams(request, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.SCHEDULE_TRADE_ACTIVITY_REPORT,\n      RequestType.POST,\n      params\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#scheduletransactionactivityreport\n   */\n  scheduleTransactionActivityReport(\n    request: ScheduleActivityReportRequest\n  ): Promise<ScheduleActivityReport> {\n    const params = completeParams(request, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.SCHEDULE_TRANSACTION_ACTIVITY_REPORT,\n      RequestType.POST,\n      params\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#scheduleproductdeltaactivityreport\n   */\n  scheduleProductDeltaActivityReport(\n    request: ScheduleActivityReportRequest\n  ): Promise<ScheduleActivityReport> {\n    const params = completeParams(request, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.SCHEDULE_PRODUCT_DELTA_ACTIVITY_REPORT,\n      RequestType.POST,\n      params\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#scheduleprofitandlossactivityreport\n   */\n  scheduleProfitAndLossActivityReport(\n    request: ScheduleActivityReportRequest\n  ): Promise<ScheduleActivityReport> {\n    const params = completeParams(request, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.SCHEDULE_PROFIT_AND_LOSS_ACTIVITY_REPORT,\n      RequestType.POST,\n      params\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#canceluserreport\n   */\n  cancelUserReport(\n    request: CancelUserReportRequest\n  ): Promise<void> {\n    return this.connection.apRequest(\n      Endpoint.CANCEL_USER_REPORT,\n      RequestType.POST,\n      request\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getuserreportwriterresultrecords\n   */\n  getUserReportWriterResultRecords(\n    request: GetUserReportWriterResultRecordsRequest\n  ): Promise<UserReportWriterResultRecords[]> {\n    return this.connection.apRequest(\n      Endpoint.GET_USER_REPORT_WRITER_RESULT_RECORDS,\n      RequestType.POST,\n      request\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getuserreporttickets\n   */\n  getUserReportTickets(\n    request: GetUserReportTicketsRequest\n  ): Promise<UserReportTicket[]> {\n    return this.connection.apRequest(\n      Endpoint.GET_USER_REPORT_TICKETS,\n      RequestType.POST,\n      request\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#removeuserreportticket\n   */\n  removeUserReportTicket(\n    request: RemoveUserReportTicket\n  ): Promise<void> {\n    return this.connection.apRequest(\n      Endpoint.REMOVE_USER_REPORT_TICKET,\n      RequestType.POST,\n      request.UserReportTicketId\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getuserreportticketsbystatus\n   */\n  getUserReportTicketsByStatus(\n    request: GetUserReportTicketsByStatusRequest[]\n  ): Promise<UserReportTicket[]> {\n    return this.connection.apRequest(\n      Endpoint.GET_USER_REPORT_TICKETS_BY_STATUS,\n      RequestType.POST,\n      request\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#downloaddocument\n   */\n  downloadDocument(\n    request: DownloadDocumentRequest\n  ): Promise<Document> {\n    return this.connection.apRequest(\n      Endpoint.DOWNLOAD_DOCUMENT,\n      RequestType.POST,\n      request\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#downloaddocumentslice\n   */\n  downloadDocumentSlice(\n    request: DownloadDocumentSliceRequest\n  ): Promise<DocumentSlice> {\n    return this.connection.apRequest(\n      Endpoint.DOWNLOAD_DOCUMENT_SLICE,\n      RequestType.POST,\n      request\n    );\n  }\n}\n", "import { Endpoint } from \"../constants/endpoints\";\nimport { RequestType, ServiceConnection } from \"../core/serviceClient\";\nimport { HealthCheck } from \"../models/response/healthCheck\";\nimport { Pong } from \"../models/response/pong\";\n\nexport class SystemService {\n  connection: ServiceConnection;\n\n  constructor(connection: ServiceConnection) {\n    this.connection = connection;\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#ping\n   */\n  ping(): Promise<Pong> {\n    return this.connection.apRequest(\n      Endpoint.PING,\n      RequestType.POST\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#healthcheck\n   */\n  healthCheck(): Promise<HealthCheck> {\n    return this.connection.apRequest(\n      Endpoint.HEALTH_CHECK,\n      RequestType.POST\n    );\n  }\n}\n", "export function completeParamsArray<T>(\n  paramsArray: T[],\n  omsId: number\n): (T & { OMSId: number })[] {\n  return paramsArray.map(params => ({\n    ...params,\n    OMSId: omsId\n  }));\n}\n", "import { TradeSummary } from \"../models/response/tradeSummary\";\n\nexport function parseTradeSummary(\n  jsonTrade: number[] | { [key: number]: number }\n): TradeSummary {\n  return {\n    TradeId: jsonTrade[0],\n    InstrumentId: jsonTrade[1],\n    Quantity: jsonTrade[2],\n    Price: jsonTrade[3],\n    Order1: jsonTrade[4],\n    Order2: jsonTrade[5],\n    Tradetime: jsonTrade[6],\n    Direction: jsonTrade[7],\n    TakerSide: jsonTrade[8],\n    BlockTrade: jsonTrade[9] == 1,\n    OrderClientId: jsonTrade[10]\n  };\n}\n", "import { Endpoint } from \"../constants/endpoints\";\nimport { RequestType, ServiceConnection } from \"../core/serviceClient\";\nimport { TradeSummary } from \"../models/response/tradeSummary\";\nimport { CancelAllOrdersRequest } from \"../models/request/cancelAllOrders\";\nimport { CancelOrderRequest } from \"../models/request/cancelOrder\";\nimport { CancelReplaceOrderRequest } from \"../models/request/cancelReplaceOrder\";\nimport { GetAccountTradesRequest } from \"../models/request/getAccountTrades\";\nimport { GetL2SnapshotRequest } from \"../models/request/getL2Snapshot\";\nimport { GetLastTradesRequest } from \"../models/request/getLastTrades\";\nimport { GetLevel1Request } from \"../models/request/getLevel1\";\nimport { GetLevel1SummaryRequest } from \"../models/request/getLevel1Summary\";\nimport { GetLevel1SummaryMinRequest } from \"../models/request/getLevel1SummaryMin\";\nimport { GetOpenOrdersRequest } from \"../models/request/getOpenOrders\";\nimport { GetOpenTradeReportsRequest } from \"../models/request/getOpenTradeReports\";\nimport { GetOrdersHistoryRequest } from \"../models/request/getOrderHistory\";\nimport { GetOrderHistoryByOrderIdRequest } from \"../models/request/getOrderHistoryByOrderId\";\nimport { GetOrdersRequest } from \"../models/request/getOrders\";\nimport { GetOrderStatusRequest } from \"../models/request/getOrderStatus\";\nimport { GetTickerHistoryRequest } from \"../models/request/getTickerHistory\";\nimport { GetTradesHistoryRequest } from \"../models/request/getTradesHistory\";\nimport { ModifyOrderRequest } from \"../models/request/modifyOrder\";\nimport { OrderBookRequest } from \"../models/request/orderBook\";\nimport { SendCancelListRequest } from \"../models/request/sendCancelList\";\nimport { SendCancelReplaceListRequest } from \"../models/request/sendCancelReplaceList\";\nimport { SendOrderRequest } from \"../models/request/sendOrder\";\nimport { SendOrderListRequest } from \"../models/request/sendOrderList\";\nimport { TradesRequest } from \"../models/request/trades\";\nimport { CancelReplaceOrderResponse } from \"../models/response/cancelReplaceOrder\";\nimport { AccountTrade } from \"../models/response/getAccountTrades\";\nimport { EnumsResponse } from \"../models/response/getEnums\";\nimport { L2Snapshot } from \"../models/response/getL2Snapshot\";\nimport { Level1 } from \"../models/response/getLevel1\";\nimport { Level1Summary } from \"../models/response/getLevel1Summary\";\nimport { Level1SummaryMin } from \"../models/response/getLevel1SummaryMin\";\nimport { OpenOrder } from \"../models/response/getOpenOrders\";\nimport { OpenTradeReport } from \"../models/response/getOpenTradeReports\";\nimport { OrderSummary } from \"../models/response/getOrderHistoryByOrderId\";\nimport { OrderStatus } from \"../models/response/getOrderStatus\";\nimport { TickerSummary } from \"../models/response/getTickerHistory\";\nimport { Order } from \"../models/response/order\";\nimport { OrderBook, orderbookFromRaw, OrderBookRaw } from \"../models/response/orderBook\";\nimport { OrderTrade } from \"../models/response/orderTrade\";\nimport { SendOrderResponse } from \"../models/response/sendOrder\";\nimport { InstrumentSummary } from \"../models/response/summary\";\nimport { Tickers } from \"../models/response/ticker\";\nimport { Trade } from \"../models/response/trades\";\nimport { completeParams } from \"../utils/completeParams\";\nimport { completeParamsArray } from \"../utils/completeParamsArray\";\nimport { parseTradeSummary } from \"../utils/parseIndexTrade\";\n\nexport class TradingService {\n  connection: ServiceConnection;\n  private readonly OMS_ID = 1;\n\n  constructor(connection: ServiceConnection) {\n    this.connection = connection;\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#sendorderlist\n   */\n  sendOrderList(params: SendOrderListRequest): Promise<void> {\n    const paramsWithOMSId = completeParamsArray(params, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.SEND_ORDER_LIST,\n      RequestType.POST,\n      paramsWithOMSId,\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#sendcancellist\n   */\n  sendCancelList(params: SendCancelListRequest): Promise<void> {\n    const paramsWithOMSId = completeParamsArray(params, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.SEND_CANCEL_LIST,\n      RequestType.POST,\n      paramsWithOMSId,\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#sendcancelreplacelist\n   */\n  sendCancelReplaceList(\n    params: SendCancelReplaceListRequest,\n  ): Promise<void> {\n    const paramsWithOMSId = completeParamsArray(params, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.SEND_CANCEL_REPLACE_LIST,\n      RequestType.POST,\n      paramsWithOMSId,\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#modifyorder\n   */\n  modifyOrder(request: ModifyOrderRequest): Promise<void> {\n    const paramsWithOMSId = completeParams(request, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.MODIFY_ORDER,\n      RequestType.POST,\n      paramsWithOMSId,\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#cancelallorders\n   */\n  cancelAllOrders(params: CancelAllOrdersRequest): Promise<void> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.CANCEL_ALL_ORDERS,\n      RequestType.POST,\n      paramsWithOMSId,\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getorderstatus\n   */\n  async getOrderStatus(\n    params: GetOrderStatusRequest,\n  ): Promise<OrderStatus> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.GET_ORDER_STATUS,\n      RequestType.POST,\n      paramsWithOMSId,\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getordershistory\n   */\n  getOrdersHistory(params: GetOrdersHistoryRequest): Promise<Order[]> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.GET_ORDERS_HISTORY,\n      RequestType.POST,\n      paramsWithOMSId,\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#gettradeshistory\n   */\n  getTradesHistory(\n    params: GetTradesHistoryRequest,\n  ): Promise<OrderTrade[]> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.GET_TRADES_HISTORY,\n      RequestType.POST,\n      paramsWithOMSId,\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getorderhistorybyorderid\n   */\n  getOrderHistoryByOrderId(\n    params: GetOrderHistoryByOrderIdRequest,\n  ): Promise<OrderSummary[]> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.GET_ORDER_HISTORY_BY_ORDER_ID,\n      RequestType.POST,\n      paramsWithOMSId,\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#gettickerhistory\n   */\n  async getTickerHistory(\n    params: GetTickerHistoryRequest,\n  ): Promise<TickerSummary[]> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    const response = (await this.connection.apRequest(\n      Endpoint.GET_TICKER_HISTORY,\n      RequestType.POST,\n      paramsWithOMSId,\n    )) as number[][];\n\n    return response.map((item): TickerSummary => ({\n      EndDateTime: item[0], // Fecha/hora de cierre en POSIX\n      High: item[1], // Precio m\u00E1ximo\n      Low: item[2], // Precio m\u00EDnimo\n      Open: item[3], // Precio de apertura\n      Close: item[4], // Precio de cierre\n      Volume: item[5], // Volumen total\n      Bid: item[6], // Mejor precio de compra\n      Ask: item[7], // Mejor precio de venta\n      InstrumentId: item[8], // ID del instrumento\n      BeginDateTime: item[9], // Fecha/hora de inicio en POSIX\n    }));\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getlasttrades\n   */\n  async getLastTrades(\n    request: GetLastTradesRequest,\n  ): Promise<TradeSummary[]> {\n    const paramsWithOMSId = completeParams(request, this.OMS_ID);\n    const response = (await this.connection.apRequest(\n      Endpoint.GET_LAST_TRADES,\n      RequestType.POST,\n      paramsWithOMSId,\n    )) as number[][];\n\n    return response.map((item) => parseTradeSummary(item));\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getlevel1summary\n   */\n  async getLevel1Summary(\n    request: GetLevel1SummaryRequest,\n  ): Promise<Level1Summary[]> {\n    const paramsWithOMSId = completeParams(request, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.GET_LEVEL1_SUMMARY,\n      RequestType.POST,\n      paramsWithOMSId,\n    )\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getlevel1summarymin\n   */\n  async getLevel1SummaryMin(\n    request: GetLevel1SummaryMinRequest,\n  ): Promise<Level1SummaryMin[]> {\n    const paramsWithOMSId = completeParams(request, this.OMS_ID);\n    // Make the HTTP request\n    const response = (await this.connection.apRequest(\n      Endpoint.GET_LEVEL1_SUMMARY_MIN,\n      RequestType.POST,\n      paramsWithOMSId,\n    )) as number[][];\n\n    return response.map((data): Level1SummaryMin => ({\n      InstrumentId: data[0],\n      InstrumentSymbol: data[1].toString(),\n      LastTradedPx: data[2],\n      Rolling24HrPxChange: data[3],\n      Rolling24HrPxChangePercent: data[4],\n      Rolling24HrVolume: data[5],\n    }));\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getopentradereports\n   */\n  getOpenTradeReports(\n    request: GetOpenTradeReportsRequest,\n  ): Promise<OpenTradeReport[]> {\n    const paramsWithOMSId = completeParams(request, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.GET_OPEN_TRADE_REPORTS,\n      RequestType.POST,\n      paramsWithOMSId,\n    )\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getorders\n   */\n  getOrders(request: GetOrdersRequest): Promise<Order[]> {\n    const paramsWithOMSId = completeParams(request, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.GET_ORDERS,\n      RequestType.POST,\n      paramsWithOMSId,\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getorderhistory\n   */\n  getOrderHistory(\n    request: GetOrdersHistoryRequest,\n  ): Promise<Order[]> {\n    const paramsWithOMSId = completeParams(request, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.GET_ORDER_HISTORY,\n      RequestType.POST,\n      paramsWithOMSId,\n    )\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#sendorder\n   */\n  async sendOrder(request: SendOrderRequest): Promise<SendOrderResponse> {\n    const paramsWithOMSId = completeParams(request, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.SEND_ORDER,\n      RequestType.POST,\n      paramsWithOMSId,\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#cancelreplaceorder\n   */\n  cancelReplaceOrder(\n    params: CancelReplaceOrderRequest,\n  ): Promise<CancelReplaceOrderResponse> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.CANCEL_REPLACE_ORDER,\n      RequestType.POST,\n      paramsWithOMSId,\n    )\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#cancelorder\n   */\n  cancelOrder(params: CancelOrderRequest): Promise<void> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.CANCEL_ORDER,\n      RequestType.POST,\n      paramsWithOMSId,\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getopenorders\n   */\n  getOpenOrders(\n    params: GetOpenOrdersRequest,\n  ): Promise<OpenOrder[]> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.GET_OPEN_ORDERS,\n      RequestType.POST,\n      paramsWithOMSId,\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getaccounttrades\n   */\n  getAccountTrades(\n    request: GetAccountTradesRequest,\n  ): Promise<AccountTrade[]> {\n    const paramsWithOMSId = completeParams(request, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.GET_ACCOUNT_TRADES,\n      RequestType.POST,\n      paramsWithOMSId,\n    )\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#summary\n   */\n  getSummary(): Promise<InstrumentSummary[]> {\n    return this.connection.apRequest(\n      Endpoint.SUMMARY,\n      RequestType.POST,\n    )\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#ticker\n   */\n  getTicker(): Promise<Tickers> {\n    return this.connection.apRequest(\n      Endpoint.TICKER,\n      RequestType.POST,\n    )\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#orderbook\n   */\n  async getOrderBook(\n    request: OrderBookRequest,\n  ): Promise<OrderBook> {\n    const orderbookRaw = await this.connection.apRequest<OrderBookRequest, OrderBookRaw>(\n      Endpoint.ORDER_BOOK,\n      RequestType.POST,\n      request,\n    );\n    return orderbookFromRaw(orderbookRaw)\n  }\n\n  getOrderBookRaw(\n    request: OrderBookRequest,\n  ): Promise<OrderBookRaw> {\n    return this.connection.apRequest(\n      Endpoint.ORDER_BOOK,\n      RequestType.POST,\n      request,\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#trades\n   */\n  getTrades(params: TradesRequest): Promise<Trade[]> {\n    return this.connection.apRequest(\n      Endpoint.TRADES,\n      RequestType.POST,\n      params,\n    )\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getl2snapshot\n   */\n  async getL2Snapshot(request: GetL2SnapshotRequest): Promise<L2Snapshot[]> {\n    const paramsWithOMSId = completeParams(request, this.OMS_ID);\n\n    const response: number[][] = (await this.connection.apRequest(\n      Endpoint.GET_L2_SNAPSHOT,\n      RequestType.POST,\n      paramsWithOMSId,\n    )) as number[][];\n\n    return response.map((snapshot): L2Snapshot => ({\n      MDUpdateID: snapshot[0],\n      NumberOfUniqueAccounts: snapshot[1],\n      ActionDateTime: snapshot[2],\n      ActionType: snapshot[3],\n      LastTradePrice: snapshot[4],\n      NumberOfOrders: snapshot[5],\n      Price: snapshot[6],\n      ProductPairCode: snapshot[7],\n      Quantity: snapshot[8],\n      Side: snapshot[9],\n    }));\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getlevel1\n   */\n  getLevel1(request: GetLevel1Request): Promise<Level1> {\n    const paramsWithOMSId = completeParams(request, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.GET_LEVEL1,\n      RequestType.POST,\n      paramsWithOMSId,\n    )\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getenums\n   */\n  getEnums(): Promise<EnumsResponse> {\n    return this.connection.apRequest(\n      Endpoint.GET_ENUMS,\n      RequestType.POST,\n    )\n  }\n}\n", "import { Endpoint } from \"../constants/endpoints\";\nimport { RequestType, ServiceConnection } from \"../core/serviceClient\";\nimport { GetUserAccountsRequest } from \"../models/request/getUserAccounts\";\nimport { GetUserDevicesRequest } from \"../models/request/getUserDevices\";\nimport { GetUserInfoRequest } from \"../models/request/getUserInfo\";\nimport { GetUserPermissionsRequest } from \"../models/request/getUserPermissions\";\nimport { UserDevice } from \"../models/response/getUserDevices\";\nimport { UserInfo } from \"../models/response/getUserInfo\";\nimport { completeParams } from \"../utils/completeParams\";\n\nexport class UserService {\n  connection: ServiceConnection;\n  private readonly OMS_ID = 1;\n\n  constructor(connection: ServiceConnection) {\n    this.connection = connection;\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getuseraccounts\n   */\n  getUserAccounts(\n    request: GetUserAccountsRequest\n  ): Promise<number[]> {\n    const params = completeParams(request, this.OMS_ID);\n    return this.connection.apRequest(\n      Endpoint.GET_USER_ACCOUNTS,\n      RequestType.POST,\n      params\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getuserdevices\n   */\n  getUserDevices(\n    request: GetUserDevicesRequest\n  ): Promise<UserDevice[]> {\n    return this.connection.apRequest(\n      Endpoint.GET_USER_DEVICES,\n      RequestType.POST,\n      request\n    )\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getuserinfo\n   */\n  getUserInfo(\n    request: GetUserInfoRequest\n  ): Promise<UserInfo> {\n    return this.connection.apRequest(\n      Endpoint.GET_USER_INFO,\n      RequestType.POST,\n      request\n    )\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getuserpermissions\n   */\n  getUserPermissions(\n    request: GetUserPermissionsRequest\n  ): Promise<string[]> {\n    return this.connection.apRequest(\n      Endpoint.GET_USER_PERMISSIONS,\n      RequestType.POST,\n      request\n    )\n  }\n}\n", "import { Endpoint } from \"../constants/endpoints\";\nimport { RequestType, ServiceConnection } from \"../core/serviceClient\";\nimport { AddWhitelistedAddressRequest } from \"../models/request/addWhitelistedAddress\";\nimport { ConfirmFiatWithdrawRequest } from \"../models/request/confirmFiatWithdraw\";\nimport { ConfirmWhitelistedAddressRequest } from \"../models/request/confirmWhitelistedAddress\";\nimport { AddClientBankAccountRequest } from \"../models/request/addClientBankAccount\";\nimport { CreateCryptoWithdrawRequest } from \"../models/request/createCryptoWithdraw\";\nimport { CreateDepositAddressesRequest } from \"../models/request/createDepositAddress\";\nimport { CreateFiatDepositRequest } from \"../models/request/createFiatDeposit\";\nimport { CreateFiatWithdrawRequest } from \"../models/request/createFiatWithdraw\";\nimport { DeleteClientBankAccountRequest } from \"../models/request/deleteClientBankAccount\";\nimport { DeleteWhitelistedAddressRequest } from \"../models/request/deleteWhitelistedAddress\";\nimport { GetClientBankAccountRequest } from \"../models/request/getClientBankAccount\";\nimport { GetClientBankAccountsRequest } from \"../models/request/getClientBankAccounts\";\nimport { GetBankRequest } from \"../models/request/getBanks\";\nimport { GetNetworksTemplatesRequest } from \"../models/request/getCurrencyNetworkTemplates\";\nimport { GetDepositAddressesRequest } from \"../models/request/getDepositAddresses\";\nimport { GetOwnersFiatWithdrawRequest } from \"../models/request/getOwnersFiatWithdraw\";\nimport { GetTransactionsRequest } from \"../models/request/getTransactions\";\nimport { GetWhitelistedAddressesRequest } from \"../models/request/getWhitelistedAddresses\";\nimport { TransferFundsRequest } from \"../models/request/transferFunds\";\nimport { UpdateOneStepWithdrawRequest } from \"../models/request/updateOneStepWithdraw\";\nimport { Banks } from \"../models/response/bank\";\nimport { BankAccount, BankAccounts } from \"../models/response/bankAccount\";\nimport { CbuOwner } from \"../models/response/cbuOwner\";\nimport { CurrencyNetworkTemplates } from \"../models/response/networkTemplates\";\nimport { Transactions } from \"../models/response/transaction\";\nimport { WhiteListedAddress } from \"../models/response/whiteListedAddress\";\nimport { ResendVerificationCodeWhitelistedAddressRequest } from \"../models/request/resendVerificationCodeWhitelistedAddress\";\n\nexport class WalletService {\n  connection: ServiceConnection;\n\n  constructor(connection: ServiceConnection) {\n    this.connection = connection;\n  }\n\n  #nbPagedRequest<T1, T2>(endpoint: string, requestType: RequestType, message?: T1): Promise<T2> {\n    return this.connection.nbRequest(\n      endpoint,\n      requestType,\n      message,\n      true\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getbanks\n   */\n  getBanks(request: GetBankRequest): Promise<Banks> {\n    return this.#nbPagedRequest(\n      Endpoint.BANKS,\n      RequestType.GET,\n      request\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#addclientbankaccount\n   */\n  AddClientBankAccount(request: AddClientBankAccountRequest): Promise<BankAccount> {\n    return this.connection.nbRequest(\n      Endpoint.BANK_ACCOUNTS,\n      RequestType.POST,\n      request\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getclientbankaccount\n   */\n  getClientBankAccount(request: GetClientBankAccountRequest): Promise<BankAccount> {\n    return this.connection.nbRequest(\n      Endpoint.BANK_ACCOUNTS + \"/\" + request.bankAccountId,\n      RequestType.GET,\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getclientbankaccounts\n   */\n  getClientBankAccounts(request: GetClientBankAccountsRequest): Promise<BankAccounts> {\n    return this.#nbPagedRequest(\n      Endpoint.BANK_ACCOUNTS,\n      RequestType.GET,\n      request\n    );\n  }\n\n\n  /**\n   * https://apidoc.notbank.exchange/#deleteclientbankaccount\n   */\n  deleteClientBankAccount(request: DeleteClientBankAccountRequest): Promise<void> {\n    return this.connection.nbRequest(\n      Endpoint.BANK_ACCOUNTS + \"/\" + request.bankAccountId,\n      RequestType.DELETE\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getnetworkstemplates\n   */\n  getNetworksTemplates(request: GetNetworksTemplatesRequest): Promise<CurrencyNetworkTemplates[]> {\n    return this.connection.nbRequest(\n      Endpoint.GET_NETWORKS_TEMPLATES,\n      RequestType.GET,\n      request\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getdepositaddresses\n   */\n  getDepositAddresses(request: GetDepositAddressesRequest): Promise<string[]> {\n    return this.connection.nbRequest(\n      Endpoint.DEPOSIT_ADDRESS,\n      RequestType.GET,\n      request\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#createdepositaddress\n   */\n  createDepositAddress(request: CreateDepositAddressesRequest): Promise<string> {\n    return this.connection.nbRequest(\n      Endpoint.DEPOSIT_ADDRESS,\n      RequestType.POST,\n      request\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getwhitelistedaddresses\n   */\n  getWhitelistedAddresses(request: GetWhitelistedAddressesRequest): Promise<WhiteListedAddress[]> {\n    return this.connection.nbRequest(\n      Endpoint.WHITELIST_ADDRESSES,\n      RequestType.GET,\n      request\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#addwhitelistedaddress\n   */\n  addWhitelistedAddress(request: AddWhitelistedAddressRequest): Promise<string> {\n    return this.connection.nbRequest(\n      Endpoint.WHITELIST_ADDRESSES,\n      RequestType.POST,\n      request\n    );\n  }\n  /**\n   * https://apidoc.notbank.exchange/#confirmwhitelistedaddress\n   */\n  confirmWhitelistedAddress(request: ConfirmWhitelistedAddressRequest): Promise<void> {\n    return this.connection.nbRequest(\n      Endpoint.WHITELIST_ADDRESSES + \"/\" + request.whitelistedAddressId + \"/verification\",\n      RequestType.POST,\n      { sms_code: request.sms_code, account_id: request.account_id }\n    );\n  }\n\n  resendVerificationCodeWhitelistedAddress(request: ResendVerificationCodeWhitelistedAddressRequest): Promise<void> {\n    return this.connection.nbRequest(\n      Endpoint.WHITELIST_ADDRESSES + \"/\" + request.whitelistedAddressId + \"/verification\",\n      RequestType.GET,\n      { account_id: request.account_id }\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#deletewhitelistedaddress\n   */\n  deleteWhitelistedAddress(request: DeleteWhitelistedAddressRequest): Promise<void> {\n    return this.connection.nbRequest(\n      Endpoint.WHITELIST_ADDRESSES + \"/\" + request.whitelistedAddressId,\n      RequestType.DELETE,\n      {\n        account_id: request.account_id,\n        otp: request.otp\n      }\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#updateonestepwithdraw\n   */\n  updateOneStepWithdraw(request: UpdateOneStepWithdrawRequest): Promise<void> {\n    return this.connection.nbRequest(\n      Endpoint.UPDATE_ONE_STEP_WITHDRAW,\n      RequestType.POST,\n      request\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#createcryptowithdraw\n   */\n  createCryptoWithdraw(request: CreateCryptoWithdrawRequest): Promise<string> {\n    return this.connection.nbRequest(\n      Endpoint.CREATE_CRYPTO_WITHDRAW,\n      RequestType.POST,\n      request\n    );\n  }\n\n\n  /**\n   * https://apidoc.notbank.exchange/#createfiatdeposit\n   */\n  async createFiatDeposit(request: CreateFiatDepositRequest): Promise<string | undefined> {\n    const result = await this.connection.nbRequest<CreateFiatDepositRequest, { url?: string }>(\n      Endpoint.FIAT_DEPOSIT,\n      RequestType.POST,\n      request\n    );\n    return result?.url;\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getownersfiatwithdraw\n   */\n  getOwnersFiatWithdraw(request: GetOwnersFiatWithdrawRequest): Promise<CbuOwner[]> {\n    return this.connection.nbRequest(\n      Endpoint.GET_OWNERS_FIAT_WITHDRAW,\n      RequestType.GET,\n      request\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getownersfiatwithdraw\n   */\n  async createFiatWithdraw(request: CreateFiatWithdrawRequest): Promise<string | undefined> {\n    const result = await this.connection.nbRequest<CreateFiatWithdrawRequest, { withdrawal_id?: string }>(\n      Endpoint.FIAT_WITHDRAW,\n      RequestType.POST,\n      request\n    );\n    return result?.withdrawal_id;\n  }\n\n  /**\n * https://apidoc.notbank.exchange/#confirmfiatwithdraw\n */\n  confirmFiatWithdraw(request: ConfirmFiatWithdrawRequest): Promise<void> {\n    return this.connection.nbRequest(\n      Endpoint.FIAT_WITHDRAW + \"/\" + request.withdrawal_id,\n      RequestType.POST,\n      { attempt_code: request.attempt_code }\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#transferfunds\n   */\n  transferFunds(request: TransferFundsRequest): Promise<string | undefined> {\n    return this.connection.nbRequest(\n      Endpoint.TRANSFER_FUNDS,\n      RequestType.POST,\n      request\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#gettransactions\n   */\n  getTransactions(request: GetTransactionsRequest): Promise<Transactions> {\n    return this.#nbPagedRequest(\n      Endpoint.GET_TRANSACTIONS,\n      RequestType.GET,\n      request\n    );\n  }\n}\n", "import { Endpoint } from \"../constants/endpoints\";\nimport { RequestType, ServiceConnection } from \"../core/serviceClient\";\nimport { CreateDirectQuoteRequest } from \"../models/request/createDirectQuote\";\nimport { CreateInverseQuoteRequest } from \"../models/request/createInverseQuote\";\nimport { ExecuteQuoteRequest } from \"../models/request/executeQuote\";\nimport { GetQuoteRequest } from \"../models/request/getQuote\";\nimport { GetQuotesRequest } from \"../models/request/getQuotes\";\nimport { Quote } from \"../models/response/quote\";\n\nexport class QuoteService {\n  connection: ServiceConnection;\n\n  constructor(connection: ServiceConnection) {\n    this.connection = connection;\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getquotes\n   */\n  getQuotes(request: GetQuotesRequest): Promise<Quote[]> {\n    return this.connection.nbRequest(\n      Endpoint.QUOTES,\n      RequestType.GET,\n      request\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#createdirectquote\n   */\n  async createDirectQuote(request: CreateDirectQuoteRequest): Promise<String> {\n    return (await this.connection.nbRequest(\n      Endpoint.QUOTES_DIRECT,\n      RequestType.POST,\n      request\n    ) as { id: string }).id;\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#createinversequote\n   */\n  async createInverseQuote(request: CreateInverseQuoteRequest): Promise<String> {\n    return (await this.connection.nbRequest(\n      Endpoint.QUOTES_INVERSE,\n      RequestType.POST,\n      request\n    ) as { id: string }).id;\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#getquote\n   */\n  getQuote(request: GetQuoteRequest): Promise<Quote> {\n    return this.connection.nbRequest(\n      Endpoint.QUOTES + \"/\" + request.quote_id,\n      RequestType.GET,\n      request\n    );\n  }\n\n\n  /**\n   * https://apidoc.notbank.exchange/#executequote\n   */\n  executeQuote(request: ExecuteQuoteRequest): Promise<Quote> {\n    return this.connection.nbRequest(\n      Endpoint.QUOTES + \"/\" + request.quote_id,\n      RequestType.POST,\n      request\n    );\n  }\n}\n", "import { getNonce, sign } from \"../core/hmac\";\nimport { HttpConnection } from \"../core/http/httpClient\";\nimport { AccountService } from \"./accountService\";\nimport { AuthService } from \"./authService\";\nimport { FeeService } from \"./feeService\";\nimport { InstrumentService } from \"./instrumentService\";\nimport { ProductService } from \"./productService\";\nimport { ReportService } from \"./reportService\";\nimport { SystemService } from \"./systemService\";\nimport { TradingService } from \"./tradingService\";\nimport { UserService } from \"./userService\";\nimport { WalletService } from \"./walletService\";\nimport { QuoteService } from \"./quoteService\";\nimport { ServiceConnection } from \"../core/serviceClient\";\n\nconst DEFAULT_DOMAIN = \"api.notbank.exchange\";\n\nexport class HttpServiceFactory {\n  #httpConnection: HttpConnection;\n\n  constructor(domain?: string) {\n    const finalDomain = domain || DEFAULT_DOMAIN;\n    this.#httpConnection = new HttpConnection(finalDomain);\n  }\n\n  authenticateUser(params: {\n    ApiPublicKey: string;\n    ApiSecretKey: string;\n    UserId: string;\n  }): Promise<void> {\n    var nonce = getNonce();\n    var signature = sign(\n      params.ApiPublicKey,\n      params.ApiSecretKey,\n      params.UserId,\n      nonce\n    );\n    return this.#httpConnection.authenticateUser({\n      APIKey: params.ApiPublicKey,\n      Signature: signature,\n      UserId: params.UserId,\n      Nonce: nonce\n    });\n  }\n\n  updateSessionToken(sessionToken: string) {\n    this.getConnection().updateSessionToken(sessionToken);\n  }\n\n  getConnection(): ServiceConnection {\n    return this.#httpConnection;\n  }\n\n  newAccountService(): AccountService {\n    return new AccountService(this.#httpConnection);\n  }\n\n  newAuthService(): AuthService {\n    return new AuthService(this.#httpConnection);\n  }\n\n  newFeeService(): FeeService {\n    return new FeeService(this.#httpConnection);\n  }\n\n  newInstrumentService(): InstrumentService {\n    return new InstrumentService(this.#httpConnection);\n  }\n\n  newProductService(): ProductService {\n    return new ProductService(this.#httpConnection);\n  }\n\n  newReportService(): ReportService {\n    return new ReportService(this.#httpConnection);\n  }\n\n  newSystemService(): SystemService {\n    return new SystemService(this.#httpConnection);\n  }\n\n  newTradingService(): TradingService {\n    return new TradingService(this.#httpConnection);\n  }\n\n  newUserService(): UserService {\n    return new UserService(this.#httpConnection);\n  }\n\n  newWalletService(): WalletService {\n    return new WalletService(this.#httpConnection);\n  }\n  newQuoteService(): QuoteService {\n    return new QuoteService(this.#httpConnection);\n  }\n}\n", "import { Endpoint } from \"../../constants/endpoints\";\nimport { Pong } from \"../../models\";\nimport { RequestType } from \"../serviceClient\";\nimport { Restarter } from \"./restarter\";\nimport { WebsocketConnection } from \"./websocketConnection\";\n\nexport class Pinger {\n  private pingIntervalMillis: number\n  private pingTimeoutMillis: number\n  private interval?: NodeJS.Timeout\n\n  constructor(\n    pingIntervalMillis: number = 10_000,\n    pingTimeoutMillis: number = 5_000) {\n    this.pingIntervalMillis = pingIntervalMillis\n    this.pingTimeoutMillis = pingTimeoutMillis\n  }\n\n  startPing(connection: WebsocketConnection, restarter: Restarter) {\n    this.stop()\n    this.interval = setInterval(async () => {\n      try {\n        await Promise.race([\n          connection.apRequest<void, Pong>(Endpoint.PING, RequestType.NONE),\n          new Promise((resolve, reject) => setTimeout(reject, this.pingTimeoutMillis))\n        ])\n\n      } catch (e) {\n        await restarter.reconnect()\n        return\n      }\n    }, this.pingIntervalMillis)\n    if (typeof this.interval.unref === 'function') {\n      this.interval.unref();\n    }\n  }\n\n  stop() {\n    if (!this.interval) { return }\n    clearTimeout(this.interval)\n  }\n}", "import { WebsocketConnection } from \"./websocketConnection\";\n\nexport class Reauther {\n  private authenticateFn?: (WebsocketConnection) => void\n\n  constructor() {\n    this.authenticateFn = null\n  }\n\n  updateAuthentication(authenticateFn: (connection: WebsocketConnection) => void) {\n    this.authenticateFn = authenticateFn\n  }\n\n  removeAuthentication() {\n    this.authenticateFn = null\n  }\n\n  makeAuthentication(connection: WebsocketConnection) {\n    if (this.authenticateFn === null) {\n      return\n    }\n    this.authenticateFn(connection)\n  }\n}", "import { WebSocketEndpoint } from \"../../constants/endpoints\";\nimport { MessageFrame } from \"./messageFrame\";\n\nexport class SubscriptionIdentifier {\n  static #mapping: Partial<\n    Record<WebSocketEndpoint, (eventName: string, payloadStr: string) => string>\n  > = {\n      [WebSocketEndpoint.SUBSCRIBE_LEVEL1]: this.#getLevel1TickerName,\n      [WebSocketEndpoint.UPDATE_LEVEL1]: this.#getLevel1TickerName,\n      [WebSocketEndpoint.SUBSCRIBE_LEVEL2]: this.#getLevel2TickerName,\n      [WebSocketEndpoint.UPDATE_LEVEL2]: this.#getLevel2TickerName,\n      [WebSocketEndpoint.SUBSCRIBE_TICKER]: this.#getTickerName,\n      [WebSocketEndpoint.UPDATE_TICKER]: this.#getTickerName,\n      [WebSocketEndpoint.SUBSCRIBE_TRADES]: this.#getSocketTradeName,\n      [WebSocketEndpoint.SUBSCRIBE_ORDER_STATE_EVENTS]: this.#getOrderEventName,\n      [WebSocketEndpoint.ACCOUNT_EVENT_TRANSACTION]: this.#getAccountEventName,\n      [WebSocketEndpoint.ACCOUNT_EVENT_WITHDRAW_TICKET_UPDATE]:\n        this.#getAccountEventName,\n      [WebSocketEndpoint.ACCOUNT_EVENT_ACCOUNT_POSITION]:\n        this.#getAccountEventName,\n      [WebSocketEndpoint.ACCOUNT_EVENT_ORDER_TRADE]: this.#getAccountEventName,\n      [WebSocketEndpoint.ACCOUNT_EVENT_ORDER_STATE]: this.#getAccountEventName,\n      [WebSocketEndpoint.ACCOUNT_EVENT_DEPOSIT_TICKET_UPDATE]:\n        this.#getAccountEventName,\n      [WebSocketEndpoint.ACCOUNT_EVENT_ACCOUNT_INFO_UPDATE]:\n        this.#getAccountEventName,\n      [WebSocketEndpoint.ACCOUNT_EVENT_CANCEL_ORDER_REJECT]:\n        this.#getAccountEventName,\n      [WebSocketEndpoint.ACCOUNT_EVENT_DEPOSIT]: this.#getAccountEventName,\n    };\n\n  static get(\n    eventName: string,\n    firstIdentifier: number | null = null,\n    secondIdentifier: number | null = null,\n  ) {\n    return (\n      eventName +\n      SubscriptionIdentifier.#getIdPart(firstIdentifier) +\n      SubscriptionIdentifier.#getIdPart(secondIdentifier)\n    );\n  }\n\n  static #getIdPart(firstIdentifier: number) {\n    return firstIdentifier != null ? \"_\" + firstIdentifier : \"\";\n  }\n\n  static getFromMessageFrame(message: MessageFrame): string {\n    return this.#mapping[message.n]?.(message.n, message.o) ?? message.n;\n  }\n\n  static #getTickerName(eventName: string, payloadStr: string): string {\n    const instrumentId = SubscriptionIdentifier.#getValueFromList(\n      payloadStr,\n      8,\n    );\n    if (instrumentId == null) {\n      return eventName;\n    }\n    return eventName + \"_\" + instrumentId;\n  }\n\n  static #getLevel1TickerName(eventName: string, payloadStr: string): string {\n    return (\n      eventName + \"_\" + SubscriptionIdentifier.#getInstrumentedId(payloadStr)\n    );\n  }\n\n  static #getLevel2TickerName(eventName: string, payloadStr: string): string {\n    let instrumentId = SubscriptionIdentifier.#getValueFromList(payloadStr, 7);\n    if (instrumentId == null) {\n      return eventName;\n    }\n    return eventName + \"_\" + instrumentId;\n  }\n\n  static #getSocketTradeName(eventName: string, payloadStr: string): string {\n    const instrumentId = SubscriptionIdentifier.#getValueFromList(\n      payloadStr,\n      1,\n    );\n    if (instrumentId == null) {\n      return eventName;\n    }\n    return eventName + \"_\" + instrumentId;\n  }\n\n  static #getAccountEventName(eventName: string, payloadStr: string): string {\n    let accountId = SubscriptionIdentifier.#getAccountId(payloadStr);\n    if (accountId != null) {\n      return eventName + \"_\" + accountId;\n    }\n    accountId = this.#getAccountIdFromAccount(payloadStr);\n    if (accountId != null) {\n      return eventName + \"_\" + accountId;\n    }\n    return eventName;\n  }\n\n  static #getOrderEventName(eventName: string, payloadStr: string): string {\n    const data: { Instrument?: string; AccountId: number } =\n      JSON.parse(payloadStr);\n    let identifier = eventName + \"_\" + data.AccountId;\n    if (data.Instrument) {\n      identifier = identifier + \"_\" + data.Instrument;\n    }\n    return identifier;\n  }\n\n  static #getValueFromList(\n    payloadStr: string,\n    index: number,\n  ): string | number | null {\n    const data: any[][] = JSON.parse(payloadStr);\n    if (data.length == 0) {\n      return null;\n    }\n    if (data[0].length <= index) {\n      return null;\n    }\n    return data[0][index];\n  }\n\n  static #getInstrumentedId(payloadStr: string): string {\n    const data: { InstrumentId: string } = JSON.parse(payloadStr);\n    return data.InstrumentId;\n  }\n\n  static #getAccountId(payloadStr: string): string {\n    const data: { AccountId: string } = JSON.parse(payloadStr);\n    return data.AccountId;\n  }\n\n  static #getAccountIdFromAccount(payloadStr: string): string {\n    const data: { Account: string } = JSON.parse(payloadStr);\n    return data.Account;\n  }\n}\n", "import { SubscriptionData } from \"./subscriptionData\";\nimport { SubscriptionIdentifier } from \"./SubscriptionIdentifier\";\nimport { WebsocketConnection } from \"./websocketConnection\";\n\nexport class Resubscriber {\n  private currentSubscriptions: SubscriptionData[]\n\n  constructor() {\n    this.currentSubscriptions = []\n  }\n  saveSubscription(data: SubscriptionData) {\n    this.currentSubscriptions.push(data)\n  }\n\n  removeSubscription(callbackIds: string[]): void {\n    for (let i = 0; i < callbackIds.length; i++) {\n      for (let j = 0; j < this.currentSubscriptions.length; j++) {\n        var isFromSubscription = this.#hasCallbackId(this.currentSubscriptions[j], callbackIds[i])\n        if (isFromSubscription) {\n          this.currentSubscriptions.splice(j, 1)\n          return\n        }\n      }\n    }\n  }\n\n  #hasCallbackId(data: SubscriptionData, callbackId: string): boolean {\n    var subscriptionCallbackId = SubscriptionIdentifier.get(data.endpoint, data.firstIdentifier, data.secondIdentifier)\n    return subscriptionCallbackId === callbackId\n  }\n\n  makeSubscriptions(connection: WebsocketConnection): void {\n    this.currentSubscriptions.forEach(data => connection.subscribe(\n      data.endpoint,\n      data.firstIdentifier,\n      data.secondIdentifier, data.message,\n      data.subscriptionHandlers))\n  }\n}", "import WebSocket from \"universal-websocket-client\";\nimport { Endpoint } from \"../../constants/endpoints\";\nimport { MessageFrame, MessageType } from \"./messageFrame\";\nimport { SubscriptionHandler } from \"./subscriptionHandler\";\nimport { RequestType, ServiceConnection } from \"../serviceClient\";\nimport {\n  AuthenticateUserRequest,\n  NotbankError,\n  StandardResponse\n} from \"../../models\";\nimport { WebsocketHooks } from \"./websocketHooks\";\nimport { CallbackManager } from \"./callbackManager\";\nimport ErrorCode from \"../../constants/errorCode\";\nimport { SubscriptionIdentifier } from \"./SubscriptionIdentifier\";\nimport { WebsocketConnectionConfiguration } from \"./websocketConnectionConfiguration\";\n\nconst emptyFn: (o: MessageFrame) => void = (o: MessageFrame) => {};\nconst DEFAULT_DOMAIN = \"api.notbank.exchange\";\n\nexport class WebsocketConnection implements ServiceConnection {\n  private domain: string;\n  private callbackManager: CallbackManager;\n  private websocket: WebSocket;\n  private hooks: WebsocketHooks;\n  private peekMessageIn: (message: MessageFrame) => void;\n  private peekMessageOut: (message: MessageFrame) => void;\n\n  constructor(configuration: WebsocketConnectionConfiguration) {\n    this.domain = configuration?.domain || DEFAULT_DOMAIN;\n    this.callbackManager = new CallbackManager();\n    this.hooks = configuration?.websocketHooks || {};\n    this.peekMessageIn = configuration?.peekMessageIn || (_ => {});\n    this.peekMessageOut = configuration?.peekMessageOut || (_ => {});\n  }\n\n  updateSessionToken(sessionToken: string) {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  nbRequest<T1, T2>(\n    endpoint: string,\n    requestType: RequestType,\n    message?: T1\n  ): Promise<T2> {\n    throw new Error(\"websocket client does not support nb methods.\");\n  }\n\n  async connect(): Promise<void> {\n    this.websocket = new WebSocket(\"wss://\" + this.domain + \"/wsgateway\");\n    this.websocket.onopen = event => this.hooks.onOpen?.(event);\n    this.websocket.onclose = event => this.hooks.onClose?.(event);\n    this.websocket.onerror = event => this.hooks.onError?.(event);\n    this.websocket.addEventListener(\"message\", event => {\n      const messageFrame = JSON.parse(event.data) as MessageFrame;\n      this.#handleMessage(messageFrame);\n    });\n    this.websocket.addEventListener(\"message\", event =>\n      this.hooks.onMessage?.(event)\n    );\n    return new Promise<void>((resolve, _) =>\n      this.websocket.addEventListener(\"open\", _ => resolve())\n    );\n  }\n\n  #getSubscriptionCallbackId(message: MessageFrame): string {\n    return SubscriptionIdentifier.getFromMessageFrame(message);\n  }\n\n  #handleMessage(message: MessageFrame) {\n    this.peekMessageIn(message);\n    const callback = this.callbackManager.popCallback(message.i);\n    if (callback != null) {\n      callback(message);\n      if (isErrorMessage(message)) {\n        return;\n      }\n    }\n    const callbackId = this.#getSubscriptionCallbackId(message);\n    const subscriptionCallback =\n      this.callbackManager.getSubscriptionCallback(callbackId);\n\n    if (subscriptionCallback != null) {\n      subscriptionCallback(message);\n      return;\n    }\n    var lastSuffixStart = callbackId.lastIndexOf(\"_\");\n    if (lastSuffixStart == -1) {\n      return;\n    }\n    const broaderCallbackId = callbackId.substring(0, lastSuffixStart);\n    const broaderSubscriptionCallback =\n      this.callbackManager.getSubscriptionCallback(callbackId);\n    if (broaderSubscriptionCallback != null) {\n      broaderSubscriptionCallback(message);\n      return;\n    }\n  }\n\n  close(): Promise<void> {\n    return this.websocket.close();\n  }\n\n  get readyState(): number {\n    return this.websocket.readyState;\n  }\n\n  apRequest<T1, T2>(\n    endpoint: string,\n    requestType: RequestType,\n    message?: T1\n  ): Promise<T2> {\n    return this.#request(endpoint, message, MessageType.REQUEST);\n  }\n\n  #request<T1, T2>(\n    endpoint: string,\n    message?: T1,\n    messageType: MessageType = MessageType.REQUEST\n  ): Promise<T2> {\n    return new Promise((resolve, reject) => {\n      this.#requestToCallback(\n        endpoint,\n        JSON.stringify(message) || \"{}\",\n        messageType,\n        this.#handleRequestResponse<T2>(reject, resolve)\n      );\n    });\n  }\n\n  #handleRequestResponse<T>(\n    reject: (reason?: any) => void,\n    resolve: (value: T | PromiseLike<T>) => void\n  ): (o: MessageFrame) => void {\n    return (response: MessageFrame) => {\n      try {\n        var payload = JSON.parse(response.o);\n      } catch (e) {\n        reject(newStandardErrorFromString(response.o));\n        return;\n      }\n      if (response.m === MessageType.ERROR) {\n        reject(NotbankError.Factory.createFromApResponse(payload));\n        return;\n      }\n      var standardResponse = payload as StandardResponse;\n      if (\n        standardResponse?.result === false &&\n        standardResponse?.errormsg != null\n      ) {\n        reject(NotbankError.Factory.createFromApResponse(payload));\n        return;\n      }\n      resolve(payload as T);\n    };\n  }\n\n  async subscribe<T>(\n    endpoint: string,\n    firstIdentifier: number | null,\n    secondIdentifier: number | null,\n    message: T,\n    subscriptionCallbacks: SubscriptionHandler<MessageFrame>[]\n  ): Promise<void> {\n    subscriptionCallbacks.map(handler =>\n      this.callbackManager.addSubscriptionCallback(\n        SubscriptionIdentifier.get(\n          handler.eventName,\n          firstIdentifier,\n          secondIdentifier\n        ),\n        handler.eventHandler\n      )\n    );\n    return this.#request<T, void>(endpoint, message, MessageType.REQUEST);\n  }\n\n  async unsubscribe<T>(\n    endpoint: string,\n    firstIdentifier: number | null,\n    secondIdentifier: number | null,\n    message: T,\n    callbackIds: string[]\n  ): Promise<void> {\n    this.callbackManager.removeSubscriptionCallback(\n      callbackIds.map(callbackId =>\n        SubscriptionIdentifier.get(\n          callbackId,\n          firstIdentifier,\n          secondIdentifier\n        )\n      )\n    );\n    return await this.#request(endpoint, message, MessageType.REQUEST);\n  }\n\n  #requestToCallback(\n    endpoint: string,\n    message: any,\n    messageType: MessageType,\n    callback = emptyFn\n  ) {\n    const sequenceNumber = this.callbackManager.putCallback(callback);\n    const frame = {\n      m: messageType,\n      i: sequenceNumber,\n      n: endpoint,\n      o: message\n    };\n    this.peekMessageOut(frame);\n    this.websocket.send(JSON.stringify(frame));\n  }\n\n  closeConnection() {\n    this.websocket.socket.close();\n  }\n\n  async authenticateUser(params: AuthenticateUserRequest): Promise<void> {\n    await this.apRequest(Endpoint.AUTHENTICATE_USER, RequestType.NONE, params);\n  }\n}\n\nfunction newStandardErrorFromString(errorStr: string): any {\n  return NotbankError.Factory.createFromApResponse({\n    result: false,\n    errormsg: errorStr,\n    errorcode: ErrorCode.UNDEFINED,\n    statusCode: -1,\n    detail: \"\"\n  });\n}\n\nfunction isErrorMessage(message: MessageFrame): boolean {\n  let isErrorType = message.m === MessageType.ERROR;\n  if (isErrorType) {\n    return true;\n  }\n  try {\n    let standardError = message.o as StandardResponse;\n    return standardError.result == false;\n  } catch (e) {\n    return false;\n  }\n}\n", "import { MessageFrame } from \"./messageFrame\";\n\nexport class CallbackManager {\n  #subscriptionCallbacks: {\n    [eventName: string]: (message: MessageFrame) => void;\n  };\n  #callbacks: { [sequenceNumber: number]: (message: MessageFrame) => void };\n  #sequenceNumber: number;\n\n  constructor() {\n    this.#subscriptionCallbacks = {};\n    this.#callbacks = {};\n    this.#sequenceNumber = 2;\n  }\n\n  putCallback(callback: (event: MessageFrame) => void): number {\n    var sequenceNumber = this.#sequenceNumber;\n    this.#callbacks[sequenceNumber] = callback;\n    this.#sequenceNumber += 2;\n    return sequenceNumber;\n  }\n\n  popCallback(sequenceNumber: number): (event: MessageFrame) => void {\n    let callback = this.#callbacks[sequenceNumber];\n    delete this.#callbacks[sequenceNumber];\n    return callback != null ? callback : (o) => null;\n  }\n\n  addSubscriptionCallback(\n    callbackId: string,\n    callback: (event: MessageFrame) => void,\n  ): void {\n    this.#subscriptionCallbacks[callbackId] = callback;\n  }\n\n  getSubscriptionCallback(\n    callbackIdentifier: string,\n  ): (event: MessageFrame) => void {\n    let handler = this.#subscriptionCallbacks[callbackIdentifier];\n    return handler || null;\n  }\n\n  removeSubscriptionCallback(callbackIds: string[]): void {\n    callbackIds.map(\n      (callbackId) => delete this.#subscriptionCallbacks[callbackId],\n    );\n  }\n}\n", "export enum ErrorCode {\n  UNDEFINED = -1,\n  NOT_AN_ERROR = 0,\n  NOT_AUTHORIZED = 20,\n  INVALID_RESPONSE = 100,\n  OPERATION_FAILED = 101,\n  SERVER_ERROR = 102,\n  RESOURCE_NOT_FOUND = 104\n}\n\nexport default ErrorCode;\n", "import { NotbankError } from \"../../models\";\nimport { Pinger } from \"./pinger\";\nimport { Reauther } from \"./reauther\";\nimport { Resubscriber } from \"./resubscriber\";\nimport { WebsocketConnection } from \"./websocketConnection\";\nimport { WebsocketConnectionConfiguration } from \"./websocketConnectionConfiguration\";\n\nexport class Restarter {\n  private reconnecting: boolean\n  private connection?: WebsocketConnection\n  private connectionConfiguration: WebsocketConnectionConfiguration\n  private pinger: Pinger\n  private resubscriber: Resubscriber\n  private reauther: Reauther\n  private closeRequested: boolean;\n\n  constructor(params: { connectionConfiguration: WebsocketConnectionConfiguration }) {\n    this.closeRequested = false\n    this.reconnecting = false\n    this.connectionConfiguration = params.connectionConfiguration\n    this.pinger = new Pinger()\n    this.resubscriber = new Resubscriber()\n    this.reauther = new Reauther()\n    this.connection = null\n  }\n\n  getResubscriber(): Resubscriber {\n    return this.resubscriber\n  }\n\n  getReauther(): Reauther {\n    return this.reauther\n  }\n\n  getConnection(): WebsocketConnection {\n    if (this.reconnecting) {\n      throw new NotbankError(\"unable to make notbank request. websocket reconnecting\", -1)\n    }\n    return this.connection\n  }\n\n  async reconnect(): Promise<void> {\n    if (this.reconnecting || this.closeRequested) { return }\n    this.reconnecting = true\n    this.closeCurrentConnection()\n    this.connection = this.#newConnection()\n    await this.#connect();\n    this.reauther.makeAuthentication(this.connection)\n    this.resubscriber.makeSubscriptions(this.connection)\n    this.pinger.startPing(this.connection, this)\n    this.reconnecting = false\n  }\n\n  async #connect() {\n    while (!this.closeRequested) {\n      try {\n        await Promise.race([\n          this.connection.connect(),\n          new Promise((resolve, reject) => setTimeout(reject, 10_000))\n        ]);\n        return\n      } catch (e) {\n        // try again\n      }\n    }\n  }\n\n  #newConnection(): WebsocketConnection {\n    return new WebsocketConnection({\n      domain: this.connectionConfiguration.domain,\n      peekMessageIn: this.connectionConfiguration.peekMessageIn,\n      peekMessageOut: this.connectionConfiguration.peekMessageOut,\n      websocketHooks: {\n        onMessage: this.connectionConfiguration.websocketHooks?.onMessage,\n        onOpen: this.connectionConfiguration.websocketHooks?.onOpen,\n        onError: (event) => {\n          if (this.reconnecting) { return }\n          this.connectionConfiguration.websocketHooks?.onError?.(event)\n        },\n        onClose: (event) => {\n          if (this.reconnecting || !this.closeRequested) { return }\n          this.connectionConfiguration.websocketHooks?.onClose?.(event)\n        },\n      }\n    })\n  }\n\n  closeCurrentConnection(): Promise<void> {\n    this.pinger.stop()\n    var closed = this.connection?.close()\n    return closed\n  }\n\n  close(): Promise<void> {\n    this.closeRequested = true\n    var closed = this.closeCurrentConnection()\n    return closed;\n  }\n}", "import { Endpoint } from \"../../constants/endpoints\";\nimport { AuthenticateUserRequest } from \"../../models\";\nimport { RequestType, ServiceConnection } from \"../serviceClient\";\nimport { MessageFrame } from \"./messageFrame\";\nimport { Restarter } from \"./restarter\";\nimport { SubscriptionHandler } from \"./subscriptionHandler\";\n\nexport class RestartingWebsocketConnection implements ServiceConnection {\n  private restarter: Restarter;\n\n  constructor(params: { restarter: Restarter }) {\n    this.restarter = params.restarter;\n  }\n\n  updateSessionToken(sessionToken: string) {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  apRequest<T1, T2>(\n    endpoint: string,\n    requestType: RequestType,\n    message?: T1\n  ): Promise<T2> {\n    if (endpoint === Endpoint.LOGOUT) {\n      this.restarter.getReauther().removeAuthentication();\n    }\n    return this.restarter\n      .getConnection()\n      .apRequest(endpoint, requestType, message);\n  }\n\n  nbRequest<T1, T2>(\n    endpoint: string,\n    requestType: RequestType,\n    message?: T1,\n    paged?: boolean\n  ): Promise<T2> {\n    throw new Error(\"websocket client does not support nb methods.\");\n  }\n\n  async authenticateUser(params: AuthenticateUserRequest): Promise<void> {\n    await this.restarter.getConnection().authenticateUser(params);\n    this.restarter\n      .getReauther()\n      .updateAuthentication(connection => connection.authenticateUser(params));\n  }\n\n  async subscribe<T>(\n    endpoint: string,\n    firstIdentifier: number | null,\n    secondIdentifier: number | null,\n    message: T,\n    subscriptionHandlers: SubscriptionHandler<MessageFrame>[]\n  ): Promise<void> {\n    await this.restarter\n      .getConnection()\n      .subscribe(\n        endpoint,\n        firstIdentifier,\n        secondIdentifier,\n        message,\n        subscriptionHandlers\n      );\n    this.restarter.getResubscriber().saveSubscription({\n      endpoint,\n      firstIdentifier,\n      secondIdentifier,\n      message,\n      subscriptionHandlers\n    });\n  }\n\n  async unsubscribe<T>(\n    endpoint: string,\n    firstIdentifier: number | null,\n    secondIdentifier: number | null,\n    message: T,\n    callback_ids: string[]\n  ): Promise<void> {\n    await this.restarter\n      .getConnection()\n      .unsubscribe(\n        endpoint,\n        firstIdentifier,\n        secondIdentifier,\n        message,\n        callback_ids\n      );\n    this.restarter.getResubscriber().removeSubscription(callback_ids);\n  }\n\n  get readyState(): number {\n    return this.restarter.getConnection().readyState;\n  }\n\n  connect(): Promise<void> {\n    return this.restarter.reconnect();\n  }\n\n  close(): Promise<void> {\n    return this.restarter.close();\n  }\n}\n", "import { MessageFrame } from \"../core/websocket/messageFrame\";\nimport { SubscriptionHandler } from \"../core/websocket/subscriptionHandler\";\n\nexport function newMaybeHandler<T>(\n  eventName: string,\n  recordHandler: ((record: T) => void) | null\n): SubscriptionHandler<MessageFrame> | null {\n  if (recordHandler == null) {\n    return null;\n  }\n  return newHandler(eventName, recordHandler);\n}\n\nexport function newHandler<T>(\n  eventName: string,\n  recordHandler: (record: T) => void\n): SubscriptionHandler<MessageFrame> {\n  return {\n    eventName: eventName,\n    eventHandler: messageFrame => recordHandler(parseRecord(messageFrame.o))\n  };\n}\n\nexport function parseRecord<T>(jsonData: string): T {\n  return JSON.parse(jsonData) as T;\n}\n", "import { WebSocketEndpoint } from \"../constants/endpoints\";\nimport { ServiceConnection } from \"../core/serviceClient\";\nimport { SubscriptionIdentifier } from \"../core/websocket/SubscriptionIdentifier\";\nimport {\n  CancelOrderRejectEvent,\n  DepositEvent\n} from \"../models/enums/accountEvent\";\nimport { TradeSummary } from \"../models/response/tradeSummary\";\nimport { TickerFeed } from \"../models/response/tickerFeed\";\nimport { SubscribeAccountEventsRequest } from \"../models/request/subscribeAccountEvents\";\nimport { SubscribeLevel1Request } from \"../models/request/subscribeLevel1\";\nimport { SubscribeLevel2Request } from \"../models/request/subscribeLevel2\";\nimport { SubscribeOrderStateEventsRequest } from \"../models/request/subscribeOrderStateEvents\";\nimport { SubscribeTickerRequest } from \"../models/request/subscribeTicker\";\nimport { SubscribeTradesRequest } from \"../models/request/subscribeTrades\";\nimport { UnsubscribeAccountEventsRequest } from \"../models/request/unsubscribeAccountEvents\";\nimport { UnsubscribeLevel1Request } from \"../models/request/unSubscribeLevel1\";\nimport { UnsubscribeLevel2Request } from \"../models/request/unSubscribeLevel2\";\nimport { UnsubscribeOrderStateEventsRequest } from \"../models/request/unsubscribeOrderStateEvents\";\nimport { UnsubscribeTickerRequest } from \"../models/request/unsubscribeTicker\";\nimport { UnsubscribeTradesRequest } from \"../models/request/unsubscribeTrades\";\nimport { AccountInfo } from \"../models/response/accountInfo\";\nimport { AccountPosition } from \"../models/response/accountPositions\";\nimport { DepositTicket } from \"../models/response/depositTicket\";\nimport { Order } from \"../models/response/order\";\nimport { OrderTrade } from \"../models/response/orderTrade\";\nimport { Level1Feed } from \"../models/response/subscribeLevel1\";\nimport { TransactionEvent } from \"../models/response/transactionEvent\";\nimport { WithdrawTicket } from \"../models/response/withdrawTicket\";\nimport { completeParams } from \"../utils/completeParams\";\nimport { parseTradeSummary } from \"../utils/parseIndexTrade\";\nimport {\n  newHandler,\n  newMaybeHandler\n} from \"../utils/subscriptionCallbacksHandler\";\nimport { Level2Feed } from \"../models/response/level2\";\n\nexport class SubscriptionService {\n  private readonly connection: ServiceConnection;\n  private readonly OMS_ID = 1;\n\n  constructor(connection: ServiceConnection) {\n    this.connection = connection;\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#subscribelevel1\n   */\n  subscribeLevel1(\n    request: SubscribeLevel1Request,\n    snapshotHandler: (ticker: Level1Feed) => void,\n    updateHandler: (ticker: Level1Feed) => void\n  ): Promise<void> {\n    const requestWithOMSId = completeParams(request, this.OMS_ID);\n    return this.connection.subscribe(\n      WebSocketEndpoint.SUBSCRIBE_LEVEL1,\n      request.InstrumentId || null,\n      null,\n      requestWithOMSId,\n      [\n        newHandler(WebSocketEndpoint.SUBSCRIBE_LEVEL1, snapshotHandler),\n        newHandler(WebSocketEndpoint.UPDATE_LEVEL1, updateHandler)\n      ]\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#unsubscribelevel1\n   */\n  async unsubscribeLevel1(request: UnsubscribeLevel1Request): Promise<void> {\n    const requestWithOMSId = completeParams(request, this.OMS_ID);\n    await this.connection.unsubscribe(\n      WebSocketEndpoint.UNSUBSCRIBE_LEVEL1,\n      request.InstrumentId || null,\n      null,\n      requestWithOMSId,\n      [WebSocketEndpoint.SUBSCRIBE_LEVEL1, WebSocketEndpoint.UNSUBSCRIBE_LEVEL1]\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#subscribelevel2\n   */\n  subscribeLevel2(\n    request: SubscribeLevel2Request,\n    snapshotHandler: (ticker: Level2Feed) => void,\n    updateHandler: (ticker: Level2Feed) => void\n  ): Promise<void> {\n    const requestWithOMSId = completeParams(request, this.OMS_ID);\n    return this.connection.subscribe(\n      WebSocketEndpoint.SUBSCRIBE_LEVEL2,\n      request.InstrumentId,\n      null,\n      requestWithOMSId,\n      [\n        newHandler(WebSocketEndpoint.SUBSCRIBE_LEVEL2, snapshotHandler),\n        newHandler(WebSocketEndpoint.UPDATE_LEVEL2, updateHandler)\n      ]\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#unsubscribelevel2\n   */\n  unsubscribeLevel2(request: UnsubscribeLevel2Request): Promise<void> {\n    const requestWithOMSId = completeParams(request, this.OMS_ID);\n    return this.connection.unsubscribe(\n      WebSocketEndpoint.UNSUBSCRIBE_LEVEL2,\n      request.InstrumentId || null,\n      null,\n      requestWithOMSId,\n      [\n        SubscriptionIdentifier.get(\n          WebSocketEndpoint.SUBSCRIBE_LEVEL2,\n          request.InstrumentId\n        )\n      ]\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#subscribetrades\n   */\n  subscribeTrades(\n    request: SubscribeTradesRequest,\n    subcriptionHandler: (trade: TradeSummary) => void\n  ): Promise<void> {\n    const requestWithOMSId = completeParams(request, this.OMS_ID);\n    return this.connection.subscribe(\n      WebSocketEndpoint.SUBSCRIBE_TRADES,\n      request.InstrumentId,\n      null,\n      requestWithOMSId,\n      [\n        newHandler<{ [key: number]: number }>(\n          WebSocketEndpoint.SUBSCRIBE_TRADES,\n          mapTrade => subcriptionHandler(parseTradeSummary(mapTrade))\n        )\n      ]\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#unsubscribetrades\n   */\n  unsubscribeTrades(request: UnsubscribeTradesRequest): Promise<void> {\n    const requestWithOMSId = completeParams(request, this.OMS_ID);\n    return this.connection.unsubscribe(\n      WebSocketEndpoint.UNSUBSCRIBE_TRADES,\n      request.InstrumentId,\n      null,\n      requestWithOMSId,\n      [WebSocketEndpoint.SUBSCRIBE_TRADES]\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#subscribeticker\n   */\n  subscribeTicker(\n    request: SubscribeTickerRequest,\n    snapshotHandler: (tickers: TickerFeed[]) => void,\n    updateHandler: (tickers: TickerFeed[]) => void\n  ): Promise<void> {\n    const requestWithOMSId = completeParams(request, this.OMS_ID);\n    return this.connection.subscribe(\n      WebSocketEndpoint.SUBSCRIBE_TICKER,\n      request.InstrumentId || null,\n      null,\n      requestWithOMSId,\n      [\n        newHandler(WebSocketEndpoint.SUBSCRIBE_TICKER, snapshotHandler),\n        newHandler(\n          WebSocketEndpoint.UPDATE_TICKER + \"_\" + request.InstrumentId,\n          updateHandler\n        )\n      ]\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#unsubscribeticker\n   */\n  unsubscribeTicker(request: UnsubscribeTickerRequest): Promise<void> {\n    const requestWithOMSId = completeParams(request, this.OMS_ID);\n    return this.connection.unsubscribe(\n      WebSocketEndpoint.UNSUBSCRIBE_TICKER,\n      request.InstrumentId || null,\n      null,\n      requestWithOMSId,\n      [WebSocketEndpoint.SUBSCRIBE_TICKER]\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#subscribeaccountevents\n   */\n  subscribeAccountEvents(\n    request: SubscribeAccountEventsRequest,\n    eventHandlers: {\n      withdrawTicketUpdateEventHandler?: (event: WithdrawTicket) => void;\n      orderTradeEventHandler?: (event: OrderTrade) => void;\n      orderStateEventHandler?: (event: Order) => void;\n      depositTicketUpdateEventHandler?: (event: DepositTicket) => void;\n      accountPositionEventHandler?: (event: AccountPosition) => void;\n      accountInfoUpdateEventHandler?: (event: AccountInfo) => void;\n      cancelOrderRejectEventHandler?: (event: CancelOrderRejectEvent) => void;\n      depositEventHandler?: (event: DepositEvent) => void;\n      transactionEventHandler?: (event: TransactionEvent) => void;\n    }\n  ): Promise<void> {\n    const requestWithOMSId = completeParams(request, this.OMS_ID);\n    return this.connection.subscribe(\n      WebSocketEndpoint.SUBSCRIBE_ACCOUNT_EVENTS,\n      request.AccountId,\n      null,\n      requestWithOMSId,\n      [\n        newMaybeHandler(\n          WebSocketEndpoint.ACCOUNT_EVENT_WITHDRAW_TICKET_UPDATE,\n          eventHandlers.withdrawTicketUpdateEventHandler || null\n        ),\n        newMaybeHandler(\n          WebSocketEndpoint.ACCOUNT_EVENT_ORDER_TRADE,\n          eventHandlers.orderTradeEventHandler || null\n        ),\n        newMaybeHandler(\n          WebSocketEndpoint.ACCOUNT_EVENT_ORDER_STATE,\n          eventHandlers.orderStateEventHandler || null\n        ),\n        newMaybeHandler(\n          WebSocketEndpoint.ACCOUNT_EVENT_DEPOSIT_TICKET_UPDATE,\n          eventHandlers.depositTicketUpdateEventHandler || null\n        ),\n        newMaybeHandler(\n          WebSocketEndpoint.ACCOUNT_EVENT_ACCOUNT_POSITION,\n          eventHandlers.accountPositionEventHandler || null\n        ),\n        newMaybeHandler(\n          WebSocketEndpoint.ACCOUNT_EVENT_ACCOUNT_INFO_UPDATE,\n          eventHandlers.accountInfoUpdateEventHandler || null\n        ),\n        newMaybeHandler(\n          WebSocketEndpoint.ACCOUNT_EVENT_CANCEL_ORDER_REJECT,\n          eventHandlers.cancelOrderRejectEventHandler || null\n        ),\n        newMaybeHandler(\n          WebSocketEndpoint.ACCOUNT_EVENT_DEPOSIT,\n          eventHandlers.depositEventHandler || null\n        ),\n        newMaybeHandler(\n          WebSocketEndpoint.ACCOUNT_EVENT_TRANSACTION,\n          eventHandlers.transactionEventHandler || null\n        )\n      ].filter(handler => handler != null)\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#unsubscribeaccountevents\n   */\n  async unsubscribeAccountEvents(\n    request: UnsubscribeAccountEventsRequest\n  ): Promise<void> {\n    const requestWithOMSId = completeParams(request, this.OMS_ID);\n    return this.connection.unsubscribe(\n      WebSocketEndpoint.UNSUBSCRIBE_ACCOUNT_EVENTS,\n      request.AccountId,\n      null,\n      requestWithOMSId,\n      [\n        WebSocketEndpoint.ACCOUNT_EVENT_WITHDRAW_TICKET_UPDATE,\n        WebSocketEndpoint.ACCOUNT_EVENT_ORDER_TRADE,\n        WebSocketEndpoint.ACCOUNT_EVENT_ORDER_STATE,\n        WebSocketEndpoint.ACCOUNT_EVENT_DEPOSIT_TICKET_UPDATE,\n        WebSocketEndpoint.ACCOUNT_EVENT_ACCOUNT_POSITION,\n        WebSocketEndpoint.ACCOUNT_EVENT_ACCOUNT_INFO_UPDATE,\n        WebSocketEndpoint.ACCOUNT_EVENT_CANCEL_ORDER_REJECT,\n        WebSocketEndpoint.ACCOUNT_EVENT_DEPOSIT,\n        WebSocketEndpoint.ACCOUNT_EVENT_TRANSACTION\n      ]\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#subscribeorderstateevents\n   */\n  subscribeOrderStateEvents(\n    request: SubscribeOrderStateEventsRequest,\n    subscriptionHandler: (event: Order) => void\n  ): Promise<void> {\n    const requestWithOMSId = completeParams(request, this.OMS_ID);\n    return this.connection.subscribe(\n      WebSocketEndpoint.SUBSCRIBE_ORDER_STATE_EVENTS,\n      request.AccountId,\n      request.InstrumentId || null,\n      requestWithOMSId,\n      [\n        newHandler(\n          WebSocketEndpoint.ACCOUNT_EVENT_ORDER_STATE,\n          subscriptionHandler\n        )\n      ]\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/#unsubscribeorderstateevents\n   */\n  unsubscribeOrderStateEvents(\n    request: UnsubscribeOrderStateEventsRequest\n  ): Promise<void> {\n    const requestWithOMSId = completeParams(request, this.OMS_ID);\n    return this.connection.unsubscribe(\n      WebSocketEndpoint.UNSUBSCRIBE_ORDER_STATE_EVENTS,\n      request.AccountId,\n      request.InstrumentId || null,\n      requestWithOMSId,\n      [WebSocketEndpoint.SUBSCRIBE_ORDER_STATE_EVENTS]\n    );\n  }\n}\n", "import { getNonce, sign } from \"../core/hmac\";\nimport { ServiceConnection } from \"../core/serviceClient\";\nimport { Restarter } from \"../core/websocket/restarter\";\nimport { RestartingWebsocketConnection } from \"../core/websocket/restartingWebsocketConnection\";\nimport { WebsocketConnection } from \"../core/websocket/websocketConnection\";\nimport { WebsocketConnectionConfiguration } from \"../core/websocket/websocketConnectionConfiguration\";\nimport { AccountService } from \"./accountService\";\nimport { AuthService } from \"./authService\";\nimport { FeeService } from \"./feeService\";\nimport { InstrumentService } from \"./instrumentService\";\nimport { ProductService } from \"./productService\";\nimport { QuoteService } from \"./quoteService\";\nimport { ReportService } from \"./reportService\";\nimport { SubscriptionService } from \"./subscriptionService\";\nimport { SystemService } from \"./systemService\";\nimport { TradingService } from \"./tradingService\";\nimport { UserService } from \"./userService\";\nimport { WalletService } from \"./walletService\";\n\n\nexport class WebsocketServiceFactory {\n  private serviceConnection: ServiceConnection;\n  private getReadyState: () => number\n\n  constructor(configuration?: WebsocketConnectionConfiguration) {\n    var connection = configuration?.withReconnect\n      ? new RestartingWebsocketConnection({\n        restarter: new Restarter({ connectionConfiguration: configuration || {} })\n      })\n      : new WebsocketConnection(configuration);\n    this.serviceConnection = connection\n    this.getReadyState = () => connection.readyState\n  }\n\n  connect(): Promise<void> {\n    return this.serviceConnection.connect();\n  }\n\n  close(): Promise<void> {\n    return this.serviceConnection.close();\n  }\n\n  get isConnecting(): boolean {\n    return this.getReadyState() === WebSocket.CONNECTING;\n  }\n\n  get isConnected(): boolean {\n    return this.getReadyState() === WebSocket.OPEN;\n  }\n\n  get isClosing(): boolean {\n    return this.getReadyState() === WebSocket.CLOSING;\n  }\n\n  get isClosed(): boolean {\n    return this.getReadyState() === WebSocket.CLOSED;\n  }\n\n  async authenticateUser(params: {\n    ApiPublicKey: string;\n    ApiSecretKey: string;\n    UserId: string;\n  }): Promise<void> {\n    var nonce = getNonce();\n    var signature = sign(\n      params.ApiPublicKey,\n      params.ApiSecretKey,\n      params.UserId,\n      nonce\n    );\n    await this.serviceConnection.authenticateUser({\n      APIKey: params.ApiPublicKey,\n      Signature: signature,\n      UserId: params.UserId,\n      Nonce: nonce\n    });\n  }\n\n  getConnection(): ServiceConnection {\n    return this.serviceConnection\n  }\n\n  newAccountService(): AccountService {\n    return new AccountService(this.serviceConnection);\n  }\n\n  newAuthService(): AuthService {\n    return new AuthService(this.serviceConnection);\n  }\n\n  newFeeService(): FeeService {\n    return new FeeService(this.serviceConnection);\n  }\n\n  newInstrumentService(): InstrumentService {\n    return new InstrumentService(this.serviceConnection);\n  }\n\n  newProductService(): ProductService {\n    return new ProductService(this.serviceConnection);\n  }\n\n  newReportService(): ReportService {\n    return new ReportService(this.serviceConnection);\n  }\n\n  newSystemService(): SystemService {\n    return new SystemService(this.serviceConnection);\n  }\n\n  getSubscriptionService(): SubscriptionService {\n    return new SubscriptionService(this.serviceConnection);\n  }\n\n  newTradingService(): TradingService {\n    return new TradingService(this.serviceConnection);\n  }\n\n  newUserService(): UserService {\n    return new UserService(this.serviceConnection);\n  }\n\n  newWalletService(): WalletService {\n    return new WalletService(this.serviceConnection);\n  }\n\n  newQuoteService(): QuoteService {\n    return new QuoteService(this.serviceConnection);\n  }\n}\n", "import { WebsocketHooks } from \"../core/websocket/websocketHooks\";\nimport { NotbankError } from \"../models\";\nimport { AccountService } from \"./accountService\";\nimport { AuthService } from \"./authService\";\nimport { FeeService } from \"./feeService\";\nimport { HttpServiceFactory } from \"./httpServiceFactory\";\nimport { InstrumentService } from \"./instrumentService\";\nimport { ProductService } from \"./productService\";\nimport { ReportService } from \"./reportService\";\nimport { SubscriptionService } from \"./subscriptionService\";\nimport { SystemService } from \"./systemService\";\nimport { TradingService } from \"./tradingService\";\nimport { UserService } from \"./userService\";\nimport { WalletService } from \"./walletService\";\nimport { QuoteService } from \"./quoteService\";\nimport { WebsocketServiceFactory } from \"./websocketServiceFactory\";\nimport { WebsocketConnectionConfiguration } from \"../core/websocket/websocketConnectionConfiguration\";\nimport { ServiceConnection } from \"../core/serviceClient\";\n\nconst DEFAULT_DOMAIN = \"api.notbank.exchange\";\n\nexport class NotbankClient {\n  connection: ServiceConnection\n  accountService: AccountService\n  authService: AuthService\n  feeService: FeeService\n  instrumentService: InstrumentService\n  productService: ProductService\n  reportService: ReportService\n  getSubscriptionService: () => SubscriptionService\n  systemService: SystemService\n  tradingService: TradingService\n  userService: UserService\n  walletService: WalletService\n  quoteService: QuoteService\n  authenticateUser: (params: {\n    ApiPublicKey: string,\n    ApiSecretKey: string,\n    UserId: string,\n  }) => Promise<void>\n  connect: () => Promise<void>\n  close: () => Promise<void>\n\n  constructor(\n    params: {\n      connection: ServiceConnection\n      accountService: AccountService,\n      authService: AuthService,\n      feeService: FeeService,\n      instrumentService: InstrumentService,\n      productService: ProductService,\n      reportService: ReportService,\n      getSubscriptionService: () => SubscriptionService\n      systemService: SystemService,\n      tradingService: TradingService,\n      userService: UserService,\n      walletService: WalletService,\n      quoteService: QuoteService,\n      authenticate: (authParams: {\n        ApiPublicKey: string,\n        ApiSecretKey: string,\n        UserId: string,\n      }) => Promise<void>,\n      connect: () => Promise<void>,\n      close: () => Promise<void>,\n    }\n  ) {\n    this.connection = params.connection\n    this.accountService = params.accountService\n    this.authService = params.authService\n    this.feeService = params.feeService\n    this.instrumentService = params.instrumentService\n    this.productService = params.productService\n    this.reportService = params.reportService\n    this.getSubscriptionService = () => params.getSubscriptionService()\n    this.systemService = params.systemService\n    this.tradingService = params.tradingService\n    this.userService = params.userService\n    this.walletService = params.walletService\n    this.quoteService = params.quoteService\n    this.authenticateUser = params.authenticate\n    this.connect = params.connect\n    this.close = params.close\n  }\n\n\n  static Factory = class Factory {\n    static createRestClient(domain: string = DEFAULT_DOMAIN) {\n      var factory = new HttpServiceFactory(domain)\n      return new NotbankClient({\n        connection: factory.getConnection(),\n        accountService: factory.newAccountService(),\n        authService: factory.newAuthService(),\n        feeService: factory.newFeeService(),\n        instrumentService: factory.newInstrumentService(),\n        productService: factory.newProductService(),\n        reportService: factory.newReportService(),\n        getSubscriptionService: () => { throw new NotbankError(\"NotbankError. subcription service only exists for websocket connection\", -1) },\n        systemService: factory.newSystemService(),\n        tradingService: factory.newTradingService(),\n        userService: factory.newUserService(),\n        walletService: factory.newWalletService(),\n        quoteService: factory.newQuoteService(),\n        authenticate: params => factory.authenticateUser(params),\n        connect: () => Promise.resolve(null),\n        close: () => Promise.resolve(null)\n      })\n    }\n    static createWebsocketClient(configuration?: WebsocketConnectionConfiguration) {\n      var factory = new WebsocketServiceFactory(configuration)\n      return new NotbankClient(\n        {\n          connection: factory.getConnection(),\n          accountService: factory.newAccountService(),\n          authService: factory.newAuthService(),\n          feeService: factory.newFeeService(),\n          instrumentService: factory.newInstrumentService(),\n          productService: factory.newProductService(),\n          reportService: factory.newReportService(),\n          getSubscriptionService: () => factory.getSubscriptionService(),\n          systemService: factory.newSystemService(),\n          tradingService: factory.newTradingService(),\n          userService: factory.newUserService(),\n          walletService: factory.newWalletService(),\n          quoteService: factory.newQuoteService(),\n          authenticate: params => factory.authenticateUser(params),\n          connect: () => factory.connect(),\n          close: () => factory.close()\n        }\n      )\n    }\n  }\n\n  getAccountService(): AccountService {\n    return this.accountService\n  }\n\n  getAuthService(): AuthService {\n    return this.authService\n  }\n\n  getFeeService(): FeeService {\n    return this.feeService\n  }\n\n  getInstrumentService(): InstrumentService {\n    return this.instrumentService\n  }\n\n  getProductService(): ProductService {\n    return this.productService\n  }\n\n  getReportService(): ReportService {\n    return this.reportService\n  }\n\n\n  getSystemService(): SystemService {\n    return this.systemService\n  }\n\n  getTradingService(): TradingService {\n    return this.tradingService\n  }\n\n  getUserService(): UserService {\n    return this.userService\n  }\n\n  getWalletService(): WalletService {\n    return this.walletService\n  }\n\n  getQuoteService(): QuoteService {\n    return this.quoteService\n  }\n\n  getConnection(): ServiceConnection {\n    return this.connection\n  }\n}\n"],
  "mappings": "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",
  "names": ["require_browser", "__commonJSMin", "exports", "module", "getGlobal", "globalObject", "require_browser", "__commonJSMin", "exports", "module", "index_exports", "__export", "NotbankClient", "models_exports", "models_exports", "__export", "AccountType", "ActionType", "ArgentinaBankAccountKind", "BrazilBankAccountKind", "ChangeReason", "ChileBankAccountKind", "ColombiaBankAccountKind", "DepositFeeMessages", "DepositStatus", "Direction", "FeeCalcType", "FeeProductType", "FeeType", "InstrumentStateArgument", "InstrumentType", "MakerTaker", "NotbankError", "OrderFlag", "OrderSide", "OrderState", "OrderTypeInt", "OrderTypeStr", "PegPriceType", "PeruBankAccountKind", "PixType", "ProductType", "ReferenceType", "ReportFlavor", "ReportFrequency", "ReportRequestStatus", "ReportWriterResultStatus", "RiskType", "SessionStatus", "SideType", "SubscriptionResponse", "SupportedCountry", "TimeInForce", "TradeDirection", "TradeSide", "TransactionReferenceTypes", "TransactionTypes", "UnsubscribeLevel2ErrorCode", "UnsubscribeTradesError", "UnsubscriptionResponse", "WithdrawErrorCode", "WithdrawFeeMessages", "WithdrawTemplateType", "orderbookFromRaw", "AccountType", "ActionType", "ArgentinaBankAccountKind", "BrazilBankAccountKind", "ChileBankAccountKind", "PeruBankAccountKind", "ColombiaBankAccountKind", "ChangeReason", "SupportedCountry", "DepositFeeMessages", "DepositStatus", "Direction", "FeeProductType", "InstrumentStateArgument", "InstrumentType", "MakerTaker", "OrderFlag", "OrderSide", "OrderState", "OrderTypeInt", "OrderTypeStr", "PegPriceType", "PixType", "ProductType", "ReferenceType", "ReportFlavor", "ReportFrequency", "ReportRequestStatus", "ReportWriterResultStatus", "RiskType", "SessionStatus", "SideType", "TimeInForce", "TradeDirection", "TradeSide", "TransactionReferenceTypes", "TransactionTypes", "UnsubscribeLevel2ErrorCode", "UnsubscribeTradesError", "WithdrawErrorCode", "WithdrawFeeMessages", "WithdrawTemplateType", "FeeCalcType", "FeeType", "orderbookFromRaw", "raw", "level", "_NotbankError", "message", "code", "standardResponse", "errMsg", "NotbankError", "UnsubscriptionResponse", "SubscriptionResponse", "import_crypto", "getRandomInt", "max", "getNonce", "sign", "apiPublicKey", "apiSecretKey", "userId", "nonce", "message", "hmac256", "crypto", "_ApResponseHandler_static", "getJsonData_fn", "getTextData_fn", "_ApResponseHandler", "response", "__async", "_a", "_b", "__privateMethod", "jsonResponse", "NotbankError", "standardResponse", "err", "__privateAdd", "ApResponseHandler", "_NbResponseHandler_static", "getData_fn", "_NbResponseHandler", "response", "paged", "__async", "_a", "jsonResponse", "__privateMethod", "NotbankError", "nbResponse", "error", "err", "__privateAdd", "NbResponseHandler", "import_node_fetch", "_aptoken", "Requester", "__privateAdd", "__privateSet", "aptoken", "config", "isPostOrDeleteRequest", "url", "body", "requestData", "fetch", "extraHeaders", "headers", "__privateGet", "__spreadValues", "endpoint", "params", "_requester", "_host", "HttpConnection", "domain", "__privateAdd", "__privateSet", "Requester", "endpoint", "requestType", "params", "paged", "__async", "url", "response", "__privateGet", "NbResponseHandler", "extraHeaders", "ApResponseHandler", "sessionToken", "firstIdentifier", "secondIdentifier", "message", "subscriptionCallbacks", "callback_ids", "responseHandler", "responseHandlers", "completeParams", "params", "omsId", "__spreadProps", "__spreadValues", "AccountService", "connection", "request", "paramsWithOMSId", "completeParams", "params", "__async", "AuthService", "connection", "params", "__async", "FeeService", "connection", "params", "paramsWithOMSId", "completeParams", "__async", "InstrumentService", "connection", "params", "paramsWithOMSId", "completeParams", "__async", "instruments", "instrument", "NotbankError", "ProductService", "connection", "params", "paramsWithOMSId", "completeParams", "__async", "products", "product", "NotbankError", "ReportService", "connection", "request", "params", "completeParams", "SystemService", "connection", "completeParamsArray", "paramsArray", "omsId", "params", "__spreadProps", "__spreadValues", "parseTradeSummary", "jsonTrade", "TradingService", "connection", "params", "paramsWithOMSId", "completeParamsArray", "request", "completeParams", "__async", "item", "parseTradeSummary", "data", "orderbookRaw", "orderbookFromRaw", "snapshot", "UserService", "connection", "request", "params", "completeParams", "_WalletService_instances", "nbPagedRequest_fn", "WalletService", "connection", "__privateAdd", "request", "__privateMethod", "__async", "result", "endpoint", "requestType", "message", "QuoteService", "connection", "request", "__async", "DEFAULT_DOMAIN", "_httpConnection", "HttpServiceFactory", "domain", "__privateAdd", "finalDomain", "__privateSet", "HttpConnection", "params", "nonce", "getNonce", "signature", "sign", "__privateGet", "sessionToken", "AccountService", "AuthService", "FeeService", "InstrumentService", "ProductService", "ReportService", "SystemService", "TradingService", "UserService", "WalletService", "QuoteService", "Pinger", "pingIntervalMillis", "pingTimeoutMillis", "connection", "restarter", "__async", "resolve", "reject", "e", "Reauther", "authenticateFn", "connection", "_mapping", "_SubscriptionIdentifier_static", "getIdPart_fn", "getTickerName_fn", "getLevel1TickerName_fn", "getLevel2TickerName_fn", "getSocketTradeName_fn", "getAccountEventName_fn", "getOrderEventName_fn", "getValueFromList_fn", "getInstrumentedId_fn", "getAccountId_fn", "getAccountIdFromAccount_fn", "_SubscriptionIdentifier", "eventName", "firstIdentifier", "secondIdentifier", "_a", "_b", "__privateMethod", "message", "_c", "__privateGet", "payloadStr", "instrumentId", "accountId", "data", "identifier", "index", "__privateAdd", "SubscriptionIdentifier", "_Resubscriber_instances", "hasCallbackId_fn", "Resubscriber", "__privateAdd", "data", "callbackIds", "i", "j", "isFromSubscription", "__privateMethod", "connection", "callbackId", "subscriptionCallbackId", "SubscriptionIdentifier", "import_universal_websocket_client", "_subscriptionCallbacks", "_callbacks", "_sequenceNumber", "CallbackManager", "__privateAdd", "__privateSet", "callback", "sequenceNumber", "__privateGet", "o", "callbackId", "callbackIdentifier", "callbackIds", "ErrorCode", "errorCode_default", "emptyFn", "o", "DEFAULT_DOMAIN", "_WebsocketConnection_instances", "getSubscriptionCallbackId_fn", "handleMessage_fn", "request_fn", "handleRequestResponse_fn", "requestToCallback_fn", "WebsocketConnection", "configuration", "__privateAdd", "CallbackManager", "_", "sessionToken", "endpoint", "requestType", "message", "__async", "WebSocket", "event", "_a", "_b", "messageFrame", "__privateMethod", "resolve", "firstIdentifier", "secondIdentifier", "subscriptionCallbacks", "handler", "SubscriptionIdentifier", "callbackIds", "callbackId", "params", "callback", "isErrorMessage", "subscriptionCallback", "lastSuffixStart", "broaderCallbackId", "broaderSubscriptionCallback", "messageType", "reject", "response", "payload", "e", "newStandardErrorFromString", "NotbankError", "standardResponse", "sequenceNumber", "frame", "errorStr", "errorCode_default", "_Restarter_instances", "connect_fn", "newConnection_fn", "Restarter", "params", "__privateAdd", "Pinger", "Resubscriber", "Reauther", "NotbankError", "__async", "__privateMethod", "_a", "closed", "resolve", "reject", "_b", "WebsocketConnection", "event", "RestartingWebsocketConnection", "params", "sessionToken", "endpoint", "requestType", "message", "paged", "__async", "connection", "firstIdentifier", "secondIdentifier", "subscriptionHandlers", "callback_ids", "newMaybeHandler", "eventName", "recordHandler", "newHandler", "messageFrame", "parseRecord", "jsonData", "SubscriptionService", "connection", "request", "snapshotHandler", "updateHandler", "requestWithOMSId", "completeParams", "newHandler", "__async", "SubscriptionIdentifier", "subcriptionHandler", "mapTrade", "parseTradeSummary", "eventHandlers", "newMaybeHandler", "handler", "subscriptionHandler", "WebsocketServiceFactory", "configuration", "connection", "RestartingWebsocketConnection", "Restarter", "WebsocketConnection", "params", "__async", "nonce", "getNonce", "signature", "sign", "AccountService", "AuthService", "FeeService", "InstrumentService", "ProductService", "ReportService", "SystemService", "SubscriptionService", "TradingService", "UserService", "WalletService", "QuoteService", "DEFAULT_DOMAIN", "_NotbankClient", "params", "domain", "factory", "HttpServiceFactory", "NotbankError", "configuration", "WebsocketServiceFactory", "NotbankClient"]
}
